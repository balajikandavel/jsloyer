<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other on JeffSloyer.io</title>
    <link>http://www.jeffsloyer.io/categories/other/index.xml</link>
    <description>Recent content in Other on JeffSloyer.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <atom:link href="http://www.jeffsloyer.io/categories/other/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why I Chose Hugo over Wordpress - Part 2</title>
      <link>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress-part2/</link>
      <pubDate>Sun, 18 Dec 2016 14:11:14 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress-part2/</guid>
      <description>

&lt;p&gt;This post has been a long time going and much overdue, it has almost been 12 months
since publishing the follow up to my previous post &lt;a href=&#34;http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/&#34;&gt;Why I Chose Hugo Over Wordpress.&lt;/a&gt;  But I am finally going to take the time and explain all the technical parts about how I made this blog work with Hugo.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-site&#34;&gt;Setting up the site&lt;/h2&gt;

&lt;p&gt;First to get started you need to install Hugo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you need to create a basic Hugo site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site jsloyer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Hugo you you can use themes, I am using a modified version of &lt;a href=&#34;https://github.com/humboldtux/startbootstrap-clean-blog&#34;&gt;StartBootstrap Clean Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I embedded the theme into my &lt;a href=&#34;https://github.com/jsloyer/jsloyer/tree/master/themes/startbootstrap-clean-blog&#34;&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you embed the theme you need to tell Hugo to use the theme.&lt;/p&gt;

&lt;p&gt;You do this in &lt;a href=&#34;https://github.com/jsloyer/jsloyer/blob/master/config.toml#L6&#34;&gt;config.toml&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme = &amp;quot;startbootstrap-clean-blog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Speaking of git you need to setup a GitHub project, the name is really important&amp;hellip; If you are publishing the Hugo site under your own GitHub org, ie your username, the git project needs to match that.  For me my GitHub username is &lt;code&gt;jsloyer&lt;/code&gt; so my git project name is &lt;code&gt;jsloyer&lt;/code&gt; as well.  The reason for this is how GitHub pages works in picking up the build and publishing for a GitHub pages site.&lt;/p&gt;

&lt;p&gt;You will be doing all of your work on the &lt;code&gt;master&lt;/code&gt; branch.  Think of the &lt;code&gt;master&lt;/code&gt; branch as you would with any of piece of software, the &lt;code&gt;master&lt;/code&gt; branch is the raw code, in this case just markdown.  There is another special magic branch called &lt;code&gt;gh-pages&lt;/code&gt; that we will go through later that makes your repo into a GitHub pages site.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-post&#34;&gt;Creating a post&lt;/h3&gt;

&lt;p&gt;So next we need to create our first post!  To do this its pretty simple&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/good-to-great.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I start up Hugo to see how the site will look.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This starts Hugo in dev mode where you can see a post while you are working on it.  The beauty is you can even check the unfinished post into git but until you flip the magic &lt;code&gt;draft&lt;/code&gt; setting on a post it won&amp;rsquo;t be live on the Internet.&lt;/p&gt;

&lt;p&gt;As you make changes to your post and save it Hugo will automatically reload in the browser what the post will look like.&lt;/p&gt;

&lt;p&gt;Before we jump into how to take a post live lets look at some of the metadata in the post&amp;hellip;  Here is some metadata for a &lt;a href=&#34;http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/&#34;&gt;previous post of mine.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = [&amp;quot;Other&amp;quot;]
date = &amp;quot;2016-01-08T14:11:14-05:00&amp;quot;
description = &amp;quot;&amp;quot;
draft = false
image = &amp;quot;/original-images/migrate.jpg&amp;quot;
tags = [&amp;quot;wordpress&amp;quot;, &amp;quot;migrate&amp;quot;]
title = &amp;quot;Why I Chose Hugo over Wordpress&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can set some various pieces of information for a post.  For my paricular theme each post has a Jumbotron image, that is set via the &lt;code&gt;image&lt;/code&gt; attribute.  More on images later&amp;hellip;  You can also set tags as well as the title of the post.  The most interesting bit here is the &lt;code&gt;draft = false&lt;/code&gt; line.  This is what I was referring to above in controlling when a post gets published.  Once you feel like your post is ready just change it to &lt;code&gt;draft = true&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;publishing&#34;&gt;Publishing&lt;/h3&gt;

&lt;p&gt;The next step is publishing your post, once you set the &lt;code&gt;draft = true&lt;/code&gt; for a post you need to check this file into Git.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;my awesome post&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point you think you might be done but you aren&amp;rsquo;t you need to setup GitHub Pages and a pipeline&amp;hellip;&lt;/p&gt;

&lt;p&gt;I chose &lt;a href=&#34;http://wercker.com&#34;&gt;Wercker&lt;/a&gt; as my CI engine for this.  It was incredibly easy to setup a pipeline to build the site as well as deploy the site back to GitHub.&lt;/p&gt;

&lt;p&gt;Before we get into the pipeline we need to setup the git project as a GitHub pages site.&lt;/p&gt;

&lt;p&gt;Goto the settings page for your project, for me its &lt;code&gt;https://github.com/jsloyer/jsloyer/settings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Scroll down to the bottom&amp;hellip;&lt;/p&gt;

&lt;p&gt;Click &amp;ldquo;Launch automatic page generator&amp;rdquo;, see below.  Go through the wizard, it really doesn&amp;rsquo;t matter what you choose here, you are going to replace the content anyways&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/gh-pages-generation-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/gh-pages-generation-medium.jpg&#34; alt=&#34;automatic page generator&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have this setup it might take a little bit but your site will be available.  For example my site without the custom domain name is &lt;code&gt;http://jsloyer.github.io/jsloyer&lt;/code&gt;.  Replace your GitHub username with mine and you will be able to access the default site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  If you want to use a custom domain name I&amp;rsquo;ll include the instructions below, for example my site is hosted on &lt;code&gt;www.jeffsloyer.io&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;automatic-pipeline-publishing&#34;&gt;Automatic Pipeline/Publishing&lt;/h3&gt;

&lt;p&gt;The next step is to to get automatic publishing setup.  So what happens for me is when I check in a new commit to the master branch, Wercker builds my images and builds the site and publishes it back to the &lt;code&gt;gh-pages&lt;/code&gt; branch automatically.&lt;/p&gt;

&lt;p&gt;To do this you need a file called &lt;code&gt;werkcer.yml&lt;/code&gt; in your project.  Below is a copy of mine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;box: nodesource/node
build:
  steps:
    - install-packages:
        packages: graphicsmagick
    - npm-install
    - grunt:
        tasks: processimages
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
        theme: startbootstrap-clean-blog
deploy:
  steps:
    - install-packages:
        packages: git ssh-client
    - lukevivier/gh-pages@0.2.1:
        token: $GIT_TOKEN
        domain: www.jeffsloyer.io
        basedir: public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above yaml file will build my Hugo site for me as well as build my images in an optimized format as well.  The only bit you need to change is if you want to use a specific theme, if you don&amp;rsquo;t want to use the one that I am using change the following to the values you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme: startbootstrap-clean-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s take a bit and talk through my automatic image minimization and rendering.  During build time my images are compressed and minimized to different sizes.  I only check in high quality original images and the build process optimizes them for me.  To do that you need two files.  They are below.  I am not going to go through how it works but basically all you have to do is run &lt;code&gt;grunt processimages&lt;/code&gt; and the tasks will optimize your images&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;blog&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/jsloyer/jsloyer.git&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Jeff Sloyer&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;glob&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-cli&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-concat&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-connect&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-copy&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-jshint&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-sass&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-uglify&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-watch&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-jekyll&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-responsive-images&amp;quot;: &amp;quot;^0.1.7&amp;quot;,
    &amp;quot;grunt-shell&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;image-size&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;yamljs&amp;quot;: &amp;quot;*&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Gruntfile.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var grunt = require(&#39;grunt&#39;),
    fs = require(&#39;fs&#39;),
    glob = require(&#39;glob&#39;),
    sizeOf = require(&#39;image-size&#39;),
    YAML = require(&#39;yamljs&#39;);

grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-connect&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-copy&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-jshint&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-sass&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);
grunt.loadNpmTasks(&#39;grunt-responsive-images&#39;);
grunt.loadNpmTasks(&#39;grunt-jekyll&#39;);
grunt.loadNpmTasks(&#39;grunt-shell&#39;);

grunt.initConfig({

    responsive_images: {
        myTask: {
          options: {
            sizes: [{
              name: &#39;thumb&#39;,
              width: 400
            },{
              name: &#39;medium&#39;,
              width: 800
            },{
              name: &amp;quot;large&amp;quot;,
              width: 1200
            }]
          },
          files: [{
            expand: true,
            src: [&#39;**/*.{jpg,gif,png,jpeg}&#39;],
            cwd: &#39;static/original-images&#39;,
            dest: &#39;static/images&#39;
          }]
        }
    }
});

grunt.registerTask(&#39;resize&#39;, [&amp;quot;responsive_images&amp;quot;]);
grunt.registerTask(&#39;imageinfo&#39;, function(){
    var done = this.async();
    glob(&#39;static/images/**/*.{jpg,gif,png}&#39;, {}, function(err, files){
        var existingYml = fs.readFileSync(&amp;quot;static/images.yml&amp;quot;).toString();
        var a = existingYml.split(&amp;quot;#!#!#!#!#&amp;quot;);
        existingYml = a[0].trim();

        var data = {};
        files.forEach(function(file){
            var dimensions = sizeOf(file);
            var image = {
                width: dimensions.width,
                height: dimensions.height,
                aspect: dimensions.width / dimensions.height
            }
            data[file] = image;
        })

        var yamlString = YAML.stringify(data);
        var yamlHeading = &amp;quot;\n\n\n#!#!#!#!# Do not edit below this line.\n&amp;quot;;
        yamlHeading += &amp;quot;# Generated automatically using `grunt imageinfo`\n\n&amp;quot;;

        fs.writeFileSync(&amp;quot;static/images.yml&amp;quot;, existingYml + yamlHeading + yamlString);
        console.log(&#39;done&#39;);
        done();
    });

});
grunt.registerTask(&#39;processimages&#39;, [&#39;resize&#39;, &#39;imageinfo&#39;]);

grunt.registerTask(&#39;default&#39;, [&#39;processimages&#39;]);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check in the above files to GitHub, the files are the following.
- &lt;code&gt;wercker.yml&lt;/code&gt;
- &lt;code&gt;Gruntfile.js&lt;/code&gt;
- &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step is getting a token from GitHub.  To generate a token goto &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will want a token with the following permissions.  &lt;strong&gt;Note once you generate the token copy it because GitHub won&amp;rsquo;t display it to you again&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/GitHub-token-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/GitHub-token-medium.jpg&#34; alt=&#34;GitHub token&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we need to goto &lt;a href=&#34;https://wercker.com&#34;&gt;Wercker&lt;/a&gt; and login with our GitHub credentials.  Once you have logged in click &amp;ldquo;Create&amp;rdquo; at the top and choose application or just click &lt;a href=&#34;https://app.wercker.com/applications/create&#34;&gt;here&lt;/a&gt;.  You will need to choose your your repo and I chose to make my pipeline private, it is up to you.  Once you have finished that you need enter in yout Gitub token so Wercker and deploy your built Hugo site back to GitHub.&lt;/p&gt;

&lt;p&gt;Next we need to edit the pipeline to deploy to GitHub.  To do this click on the workflows tab.  For example my link is &lt;a href=&#34;https://app.wercker.com/jsloyer/jsloyer/workflows&#34;&gt;https://app.wercker.com/jsloyer/jsloyer/workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Under pipeline there should already be one called &lt;code&gt;build&lt;/code&gt;.  Click on &lt;code&gt;build&lt;/code&gt;.  Scroll down to &amp;ldquo;Ignore Branches&amp;rdquo;, type in &lt;code&gt;gh-pages&lt;/code&gt;.  We are ignoring the &lt;code&gt;gh-pages&lt;/code&gt; branch as we don&amp;rsquo;t ever want to build that, we just build master.  Click &amp;ldquo;Update&amp;rdquo;.  Go back in your browser.  We need to add another pipeline called &lt;code&gt;GitHubPages&lt;/code&gt;.  We need to set an environment variable called &lt;code&gt;GIT_TOKEN&lt;/code&gt;, paste in your GitHub token from earlier, click &amp;ldquo;Protected&amp;rdquo;.  Don&amp;rsquo;t worry Wercker won&amp;rsquo;t expose this to the public.  For the name enter in &lt;code&gt;GitHubPages&lt;/code&gt;.  For &amp;ldquo;YML Pipeline name&amp;rdquo; enter in &lt;code&gt;deploy&lt;/code&gt;.  Save this and you are now finished.&lt;/p&gt;

&lt;p&gt;To trigger a build check in a file into the master branch, the pipeline should execute and deploy your site back to GitHub Pages.  If it doesn&amp;rsquo;t post a comment below and I will help you through it.&lt;/p&gt;

&lt;h3 id=&#34;advanced-stuff&#34;&gt;Advanced Stuff&lt;/h3&gt;

&lt;p&gt;Below I am going to go through some advanced stuff that you probably want&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;custom-domain-name&#34;&gt;Custom Domain Name&lt;/h4&gt;

&lt;p&gt;For my site my site is available at &lt;code&gt;www.jeffsloyer.io&lt;/code&gt;.  To do this you need to have the domain name in your &lt;code&gt;config.toml&lt;/code&gt;, mine is &lt;a href=&#34;https://github.com/jsloyer/jsloyer/blob/master/config.toml#L1&#34;&gt;available here&lt;/a&gt;.  Additionally you need your domain name in your &lt;code&gt;wercker.yml&lt;/code&gt; as well, mine is posted above.&lt;/p&gt;

&lt;p&gt;Lastly you need a CNAME entry with your registrar to point to GitHub.  For more information go &lt;a href=&#34;https://help.github.com/articles/setting-up-a-www-subdomain/&#34;&gt;here&lt;/a&gt;.  The CNAME record should point to &lt;code&gt;your-username.GitHub.io&lt;/code&gt;.  For example my site &lt;code&gt;www.jeffsloyer.io&lt;/code&gt; has a CNAME record that points to &lt;code&gt;jsloyer.GitHub.io&lt;/code&gt;.  It migh take a bit for DNS to update, depends on how long of a TTL you have&amp;hellip;&lt;/p&gt;

&lt;p&gt;Follow the instructions &lt;a href=&#34;https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-GitHub-pages-site/&#34;&gt;here&lt;/a&gt; to add the domain name to the GitHub project as well.&lt;/p&gt;

&lt;h3 id=&#34;add-ons&#34;&gt;Add-ons&lt;/h3&gt;

&lt;p&gt;Hugo has a lot of addons, some are even built right in.  For example Google Analytics and Disqus.&lt;/p&gt;

&lt;p&gt;To Google Analytics I just had to add one line to &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ganalytics = &amp;quot;UA-xxxx-xxx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add Disqus integration I just had to also add one line to &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;xxxx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple&amp;hellip;  For a full list of add-ons goto &lt;code&gt;https://gohugo.io/extras&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also please follow me on Twitter at &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt; and follow me on &lt;a href=&#34;https://www.youtube.com/channel/UCQb6E0NWy6kVglreLNigxng&#34;&gt;Youtube&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Chose Hugo over Wordpress</title>
      <link>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/</link>
      <pubDate>Fri, 08 Jan 2016 14:11:14 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/</guid>
      <description>

&lt;p&gt;I am finally back with my blog, sorry it has been quite awhile.  I just recently finished a migration of my blog my running on Wordpress, which was hosted on &lt;a href=&#34;http://wpengine.com&#34;&gt;WPEngine&lt;/a&gt; and is a really awesome service, to Github pages.  I got tired of using Wordpress and WPEngine cost me about $30/month&amp;hellip;  So I decided to migrate the site to Github pages where I can run the site for free.&lt;/p&gt;

&lt;h2 id=&#34;wordpress-vs-jekyll&#34;&gt;Wordpress vs. Jekyll&lt;/h2&gt;

&lt;p&gt;So let&amp;rsquo;s back up a bit and talk about why I first went with Wordpress.  It mostly came down to speed of getting my site up.  I took the easy way out, I didn&amp;rsquo;t want have to deal with managing a VM and maintaing Wordpress so spent a decent amount of time reading about different hosting providers for Wordpress.  WPEngine consistently rose to the top mainly for its use of use and speed.  At this point I was also dabbling with Github pages but was using Jekyll and didn&amp;rsquo;t have much luck with it.  When I was looking at using Jekyll it was being re-written, there was a version with a bunch of Ruby Gems and then a new version.  The Ruby Gems version had way more plugins and flexibility but the new version was much simplier to get up and running.  I honestly gave it a good try, I spent a couple hours trying to get things working and I couldn&amp;rsquo;t.  I am someone who usually never gives up on something, by gosh I&amp;rsquo;ll get that squre to fit into a circle&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/circle-into-square-thumb.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/circle-into-square-thumb.png&#34; alt=&#34;square into a cirlc&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this time, I had to throw up the white flag&amp;hellip;  I just couldn&amp;rsquo;t deal with Jekyll anymore, this is when I decided to jump in feet first with WPEngine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/white-flag-thumb.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/white-flag-thumb.jpg&#34; alt=&#34;white flag&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;life-with-wpengine&#34;&gt;Life with WPEngine&lt;/h2&gt;

&lt;p&gt;Life was good with WPEngine.  It was really easy to crank out a bunch of blog posts, I mean Wordpress has a great &lt;a href=&#34;https://en.wikipedia.org/wiki/WYSIWYG&#34;&gt;WYSIWYG editor&lt;/a&gt;.  I eventually got my site up and running an launched the site!&lt;/p&gt;

&lt;p&gt;I then realized I needed to optimize the site for speed and SEO.  My first task was enabling SSL.  This was incredibly easy with WPEngine, just pay them $53 bucks for a year and you get an SSL cert, that was easy&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/easy-thumb.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/easy-thumb.jpg&#34; alt=&#34;easy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My next order of business was increasing the speed of Wordpress, WPEngine already does a lot and their infrastructure is top notch but Wordpress needs some help to speed itself up.  I followed some stepson speeding up Wordpress, most of it involved caching, minifying, and uglfying assets.&lt;/p&gt;

&lt;p&gt;Life was pretty good at this point but as the site continued to grow it became slower and slower&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;time-for-a-change&#34;&gt;Time for a change&lt;/h2&gt;

&lt;p&gt;I was talking to a &lt;a href=&#34;https://twitter.com/raymondcamden&#34;&gt;colleague from work, Raymond Camden&lt;/a&gt; about our blogs and he mentioned I should check out Hugo.  Basically I kind of stopped blogging because WPEngine was too easy, plus I needed a Holiday project as well over Christmas.  I started looking into Hugo and could of not been more happy!!!&lt;/p&gt;

&lt;p&gt;Basically Hugo is a static site generator liked Jekyll but way more simplier.  Plus Hugo is written in Go and I have been recently learning Go so I was sold!&lt;/p&gt;

&lt;h2 id=&#34;hugo-vs-wordpress&#34;&gt;Hugo vs. Wordpress&lt;/h2&gt;

&lt;p&gt;So honestly you really can not beat the speed of a static site.  Wordpress no matter what has to query a database for every request and that adds up.  I decided to run my Hugo generated blog on Github Pages for even more speed.  Github fronts themselves with &lt;a href=&#34;http://fastly.com&#34;&gt;Fastly&lt;/a&gt;, which is probably the coolest and most pimp CDN out there.  Its super fast, like no one can beat them on time to first byte.  Fastly uses SSD&amp;rsquo;s in the cache machines so delivering content is blazing fast.  Additionally Fastly has an API to configure your site and basically allows you to do everything programatically, plus they have self on-boarding, a big plus that you don&amp;rsquo;t have to call some sales person&amp;hellip;&lt;/p&gt;

&lt;p&gt;I have been using markdown a bit more recently and I felt like this time I was more prepared to jump into markdown.  My Hugo site uses marketdown for the content files then HTML for the theme.  Its really nice that you can keep your content stored in markdown and its agnostic of the presentation layer (the theme).  If you don&amp;rsquo;t want to use markdown thats ok, you can create your content in HTML as well.&lt;/p&gt;

&lt;p&gt;Additionally, with Hugo I am storing my site on &lt;a href=&#34;http://github.com/jsloyer/jsloyer&#34;&gt;Github&lt;/a&gt; and I check in source content and source files such as images.  My build process uses &lt;a href=&#34;http://wercker.com&#34;&gt;Wercker&lt;/a&gt; to build my static site and to generate the correctly sized images for my blog as well.  Plus Wercker auto-deploys my site to Github Pages whenever there is a checkin!&lt;/p&gt;

&lt;h2 id=&#34;migrating-the-site&#34;&gt;Migrating the site&lt;/h2&gt;

&lt;p&gt;In my &lt;a href=&#34;http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/&#34;&gt;next post&lt;/a&gt; I will go through how I migrated my site from Wordpress to Hugo.  Hope this has been informative and hopefully interesting.  Please leave some comments below!&lt;/p&gt;

&lt;p&gt;Also please follow me on Twitter at &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt; and follow me on &lt;a href=&#34;https://www.youtube.com/channel/UCQb6E0NWy6kVglreLNigxng&#34;&gt;Youtube&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Common Deploy Errors with Community Buildpacks in Bluemix</title>
      <link>http://www.jeffsloyer.io/post/cloud-foundry-php-buildpack-doesnt-support-lucid64/</link>
      <pubDate>Wed, 29 Jul 2015 10:58:25 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/cloud-foundry-php-buildpack-doesnt-support-lucid64/</guid>
      <description>&lt;p&gt;Recently the company that owns development for Ubuntu (Canonical) just announced it is dropping support for lucid 64 which is Ubuntu 10.04 LTS.  What does this mean for Cloud Foundry and the community buildpacks?&lt;/p&gt;

&lt;p&gt;Well nothing really but there is a couple gotcha&amp;rsquo;s you should know about.&lt;/p&gt;

&lt;p&gt;I have seen issues with the following buildpacks, this is not a comprehensive list but the ones I at least know about.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PHP - &lt;a href=&#34;https://github.com/cloudfoundry/php-buildpack.git&#34;&gt;https://github.com/cloudfoundry/php-buildpack.git&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Static Build Pack - &lt;a href=&#34;https://github.com/cloudfoundry/staticfile-buildpack.git&#34;&gt;https://github.com/cloudfoundry/staticfile-buildpack.git&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These issues are documented in a couple StackOverflow posts but we are going to go through what is causing it and how to fix it.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/31057357/static-buildpack-deploy-now-failing-due-to-unsupported-stack/31058075#31058075&#34;&gt;Static Buildpack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/31057357/static-buildpack-deploy-now-failing-due-to-unsupported-stack/31062482#31062482&#34;&gt;Static Buildpack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are pushing an app to Cloud Foundry and getting an error message like the following there is a workaround you need to do to get the community buildpack&amp;rsquo;s to work.&lt;/p&gt;

&lt;p&gt;For example I have a super simple PHP app on Github I use for debugging, it is located here. For this blog post we are going to use that app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/jsloyer/phpinfo.git
cd phpinfo
cf push phpinfo-jbs2 -b https://github.com/cloudfoundry/php-buildpack.git
.....
It looks like you&#39;re deploying on a stack (currently set to *lucid64*) that&#39;s not supported by this buildpack.
That could be because you&#39;re using a recent buildpack release on a deprecated stack.
If you&#39;re using the buildpack installed by your CF admin, please let your admin know you saw this error message.
If you at one point specified a buildpack that&#39;s at git URL, please make sure you&#39;re pointed at a version that supports this stack.
Staging failed: Buildpack compilation step failed

FAILED
BuildpackCompileFailed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this is saying is the instance of Cloud Foundry that you are running on the default stack you get is an old version of Ubuntu. The PHP buildpack excepts the newer version of linux. This stack is called &lt;code&gt;cflinuxfs2&lt;/code&gt; also known as &lt;code&gt;Ubuntu 14.04&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To work around this you just need to specify the stack you want to use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push phpinfo-jbs2 -b https://github.com/cloudfoundry/php-buildpack.git -s cflinuxfs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information can be found on this issue on &lt;a href=&#34;https://github.com/cloudfoundry/php-buildpack/issues/87&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get Pumped for the Cloud Foundry Summit</title>
      <link>http://www.jeffsloyer.io/post/get-pumped-for-the-cloud-foundry-summit/</link>
      <pubDate>Thu, 30 Apr 2015 10:38:05 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/get-pumped-for-the-cloud-foundry-summit/</guid>
      <description>

&lt;p&gt;I’m pumped for the Cloud Foundry Summit! Are you??? Well if you aren’t yet hopefully you will be after reading this!&lt;/p&gt;

&lt;p&gt;If you attended the conference last year there was an awesome presentation on the future of Diego.  What is Diego you ask?  It is the new DEA that is coming for Cloud Foundry.  It is a complete re-write in Go and will add some new features such as the ability to swap out the underlaying linux containers for things like Docker.  Additionally another huge win is adding in plugins, this will be awesome as well!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Additionally, there is always a cast of characters there…  &lt;a href=&#34;https://twitter.com/angelluisdiaz&#34;&gt;Angel Diaz&lt;/a&gt; (from IBM) is a great speaker and always pumps people up (literally).  You should ask him to arm wrestle you, I would lose…&lt;/p&gt;

&lt;p&gt;Ok so for reals, what am I really excited about, well the tech, duh…  Here is a list of some of the sessions I am really pumped about and why.&lt;/p&gt;

&lt;h3 id=&#34;sessions&#34;&gt;Sessions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://cfsummit2015.sched.org/event/b9a2c4ad617e38167044bb9c42801438?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDeK1Viko&#34;&gt;A Developer’s Perspective on Cloud Foundry Operations: One Month in the Trenches&lt;/a&gt; by Cornelia Davis — Well this one is pretty obvious why, Cornelia is an awesome speaker and I am never let down by her talks, must see just for her.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cfsummit2015.sched.org/event/73242303138c19c0bacac3e71cf62a12#.VUIwGq1VhBc&#34;&gt;Rocking the Lattice: A New Path for Cloud Foundry Applications&lt;/a&gt; by James Bayer — Again probably the same reason as above, James is an awesome speaker and a must see&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://cfsummit2015.sched.org/event/c8c7462b7d0e3775c14aec71bcdb75db?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDqa1Viko&#34;&gt;Case Study: Lessons learned hosting a large, global Cloud Foundry deployments&lt;/a&gt; by Adam Gunther — This should be a good one, hosting and running a large scale Cloud Foundry deployment isn’t easy it will be interesting to learn some lessons learned.  Plus Adam is my new manager so I should probably show up so he has a plant in the audience…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://cfsummit2015.sched.org/event/bb7647207209ec5d410011d67055d615?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDtK1Viko&#34;&gt;A glimpse at Runtime&lt;/a&gt; by Zachary Auerbach and Daniel Lavine — The runtime is probably the most important part of Cloud Foundry and its always nice to hear and see some of the inner workings of the runtime team, a must see…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://cfsummit2015.sched.org/event/f81390f973280b917bf5833a808a3fe5?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDwq1Viko&#34;&gt;The Road to Persistence on Cloud Foundry Diego&lt;/a&gt; by Caleb Miles and Ted Young — This will be a good one, this talk is going to talk about a new model for the 12 factor app and more specifically some cool cluster scheduling systems like Apache Mesos.  I have friends at Twitter and the swear up and down on Mesos and how awesome is it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://cfsummit2015.sched.org/event/ba341002c205509deb3e6afe36df3da0?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUHwD61Vikp&#34;&gt;Finding and Organizing a Great Cloud Foundry User Group&lt;/a&gt; by Daniel Krook, Manuel Silveyra and Animesh Singh — Cloud Foundry wouldn’t be successful without its community.  These guys are going to be talking about how they have run and organized some of the most successful Cloud Foundry meetups in the Bay Area and NYC.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, get PUMPED!!!  I am all jacked up and ready to head to the CF Summit, better see you there.  If you come up to me at the Summit and yell out get pumped in front of me, I’ll buy you a beer or something…&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>