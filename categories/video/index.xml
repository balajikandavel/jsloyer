<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Video on JeffSloyer.io</title>
    <link>http://www.jeffsloyer.io/categories/video/index.xml</link>
    <description>Recent content in Video on JeffSloyer.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <atom:link href="http://www.jeffsloyer.io/categories/video/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fixing common errors with the PHP Buildpack in Bluemix</title>
      <link>http://www.jeffsloyer.io/post/fixing-common-errors-with-the-php-buildpack-in-bluemix/</link>
      <pubDate>Wed, 26 Aug 2015 11:17:31 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/fixing-common-errors-with-the-php-buildpack-in-bluemix/</guid>
      <description>&lt;p&gt;Following up from my &lt;a href=&#34;http://www.jeffsloyer.io/post/cloud-foundry-php-buildpack-doesnt-support-lucid64/&#34;&gt;previous post&lt;/a&gt;, Canonical recently dropped support for &lt;code&gt;lucid64&lt;/code&gt; which is Ubuntu 10.04 LTS. This affects Cloud Foundry as &lt;code&gt;lucid64&lt;/code&gt; is the basis for most buildpacks. In Cloud Foundry &lt;code&gt;lucid64&lt;/code&gt; is being phased out for Ubuntu 14.04 LTS which is known as &lt;code&gt;cflinuxfs2&lt;/code&gt; in Cloud Foundry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Getting stacks in org jbsloyer@us.ibm.com / space dev as jbsloyer@us.ibm.com...
OK

name         description
lucid64      Ubuntu 10.04
cflinuxfs2   Ubuntu 14.04.2 trusty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The PHP buildpack will take the default system buildpack and right now in Bluemix it is &lt;code&gt;lucid64&lt;/code&gt;. This will throw some errors when you try to push your PHP app, for example something like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;It looks like you&#39;re deploying on a stack (currently set to *lucid64*) that&#39;s not supported by this buildpack.
That could be because you&#39;re using a recent buildpack release on a deprecated stack.
If you&#39;re using the buildpack installed by your CF admin, please let your admin know you saw this error message.
If you at one point specified a buildpack that&#39;s at git URL, please make sure you&#39;re pointed at a version that supports this stack.
Staging failed: Buildpack compilation step failed

FAILED
BuildpackCompileFailed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix it you just need to use the &lt;code&gt;-s cflinuxfs2&lt;/code&gt; argument for the &lt;code&gt;cf push&lt;/code&gt; command.
Ex.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push myapp -b https://github.com/cloudfoundry/php-buildpack.git -s cflinuxfs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out this video for a walk through on how to fix the issue and an explanation of it.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/anJ1JUE1tgE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(Video) - Deploying your Meteor app to Cloud Foundry and Bluemix</title>
      <link>http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</link>
      <pubDate>Mon, 24 Aug 2015 11:03:35 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</guid>
      <description>&lt;p&gt;This is a follow up post to a previous post on &lt;a href=&#34;http://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/&#34;&gt;Deploying your Meteor app to Cloud Foundry and Bluemix.&lt;/a&gt;  In this post we went through how to deploy a Meteor app to Cloud Foundry and Bluemix.  In this post we will be going through the same thing except in a video format.  Check out the video below.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/dyVmB8vHFaE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero Downtime Deployment with the CF Autopilot Plugin - Video</title>
      <link>http://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/</link>
      <pubDate>Wed, 01 Jul 2015 10:51:49 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/</guid>
      <description>&lt;p&gt;I recently wrote a &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/&#34;&gt;blog post &lt;/a&gt;on what a zero downtime deployment is, why it is important, and how to perform one. I am now posting a video on the same topic so you can learn about a zero downtime deployment by watching a video instead.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/y4zor2y-yck&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;If you prefer the tutorial and text instructions please check out &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/&#34;&gt;Zero Downtime Deployment with the CF Autopilot Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personality Box – You had me at upload</title>
      <link>http://www.jeffsloyer.io/post/personality-box-you-had-me-at-upload/</link>
      <pubDate>Mon, 29 Jun 2015 10:46:59 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/personality-box-you-had-me-at-upload/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;http://www-03.ibm.com/press/us/en/pressrelease/47185.wss&#34;&gt;announced yesterday&lt;/a&gt;, IBM has formed a partnership with &lt;a href=&#34;http://Box.com&#34;&gt;Box.com&lt;/a&gt;, a partnership that includes the integration of Box into the Bluemix catalog. With its REST-based Content and View APIs, embedding enterprise-grade file storage into your app and enabling file sharing among your users has never been simpler.&lt;/p&gt;

&lt;p&gt;To help you on your way to becoming a file-sharing guru, Bluemix developer advocate Jake Peyser and I have built a sample app that you can leverage as you begin to explore the possibilities of the &lt;a href=&#34;http://box.com&#34;&gt;Box.com&lt;/a&gt; APIs.&lt;!-- more --&gt; The video below shows the application and outlines the steps to create it:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KPT7ttRRpr4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;If you want to follow &lt;em&gt;written&lt;/em&gt; step-by-step instructions on how we leveraged the &lt;a href=&#34;http://box.com&#34;&gt;Box.com&lt;/a&gt; and Watson Personality Insights services to create our app, see &lt;a href=&#34;https://developer.ibm.com/bluemix/2015/06/24/intro-to-box/&#34;&gt;Integrate Cloud File Storage and Sharing into your Bluemix App with Box&lt;/a&gt;. We encourage you to pick up where we left off and build on this sample!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero Downtime Deployment with the CF Autopilot Plugin</title>
      <link>http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</link>
      <pubDate>Fri, 19 Jun 2015 10:41:59 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</guid>
      <description>

&lt;p&gt;Zero down time deployments are a must for any Internet app running at scale.  Without the use of zero down time deployments, you would have to take down your application even just for a fraction of a second but in that fraction of a second you could lose a transaction or a purchase from a customer.  This is not acceptable anymore.  Some people like to call these apps cloud based apps, which I think is fine, but I’d rather call them Internet scale or born on the cloud apps.  The companies who create these apps understand the apps’s need to stay up, because their app is their only lifeline and, hopefully, a source of income from the world.&lt;/p&gt;

&lt;p&gt;Companies such as Facebook, Etsy, and Twitter have been using zero down time deployments for years.  They thrive because they do multiple deployments to production a day.  The number of deployments they do in one day is actually larger than most enterprise companies do in a full year.  Part of the trick is that the code changes are small but they have employed strategies such as zero down time deployments to get code into production as fast as they can.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&#34;ground-rules&#34;&gt;Ground Rules…&lt;/h2&gt;

&lt;p&gt;There are many names for this, zero down time deployments, obviously, but some people use the term blue/green, while others use the term red/back.  They all mean the same thing.  Instead of having a bias for colors in this post lets use the term “zero down time”.&lt;/p&gt;

&lt;p&gt;So what is it?&lt;/p&gt;

&lt;p&gt;Zero Down time deployments are basically what they sound like.  You update production without taking downtime.  It’s not always that simple though.  For the context of this post we are going to be talking about how to do zero down time deployments in Cloud Foundry.&lt;/p&gt;

&lt;p&gt;Basically it’s a little trick to taking advantage of the way Cloud Foundry runs underneath the covers.  Before we jump into it, there are a couple of caveats that we should discuss first.  To successfully take advantage of zero down time deployments you should have followed the &lt;a href=&#34;http://12factor.net/&#34;&gt;12 Factor App guidelines&lt;/a&gt;. This will ensure that your app is horizontally scalable and can be deployed in a manner that will result in zero down time.  Below are some highlights that you should abide by.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do not store sessions on disk or in memory.  Store them in some type of shared database or file system.  This could be your favorite database or an in memory database as well.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not store configuration information in your application or on disk.  You should store your config info for your app in environment variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is probably the most important, your application needs to be forward and backwards compatible with your database schema…  Say what?  Yes, you need to trust your developers to manage the database schema from your code.If you are using a relational database, you will need some kind of framework to do database migrations for you.  It’s not just that simple with relational databases though…  If you have a big database migration DO NOT PERORM MIGRATIONS THAT WILL INTERRUPT TRAFFIC!  Perform them slowly over time where migrations do not impact users and traffic.  Yahoo had a major application upgrade and it took them 6 months to do the migration to avoid impacting users and taking an outage.  Remember we do not take outages…  If you are in NoSQL land, your life is easier.  Just revision your API’s and educate your developers on forward and backwards data compatibility.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;importance-of-zero-down-time-deployments&#34;&gt;Importance of Zero Down Time Deployments&lt;/h2&gt;

&lt;p&gt;So why are zero down time deployments so important?  The answer is simple, to keep your website/app up so you can make money!  Well that might be over-simplified a bit, but basically it all boils down to keeping your app up so you can continue to do what you do best, and hopefully that involves making money.  If you look at Facebook, for example, they put code into production weeks and months before a feature is exposed to the public.  They extensively test the features on employees first, then slowly enable the features to the rest of the world.&lt;/p&gt;

&lt;p&gt;This is key, getting features in front of your customers and getting feedback from them.  If it works that’s great, but if it doesn’t at least you know in a short time frame so you can remove it and pivot to go in a different direction.  The current landscape is so fast paced that if you don’t get a feature out, your competition could beat you.&lt;/p&gt;

&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;So let’s walk through what needs to happen to perform zero downtime deployments in Cloud Foundry.  For the use of the walk-through, the application is currently taking traffic on &lt;code&gt;myapp.mybluemix.net&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Deploy your app or use a currently running app.
Currently your application is taking traffic on &lt;code&gt;myapp.mybluemix.net&lt;/code&gt;.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.001-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.001-medium.png&#34; alt=&#34;zero downtime graphics.001 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the new version of your app to &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt;.
At this time there is currently two versions of your app running.  &lt;code&gt;myapp.mybluemix.net&lt;/code&gt; is still taking production traffic.
The new app &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt; is separate, it can be pointed to your production API keys and databases at this point.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.002-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.002-medium.png&#34; alt=&#34;zero downtime graphics.002 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perform smoke tests on the new version of the application.
Some people say this step is optional, but to me its not.  This is key to make sure there wasn’t any weird regressions or merge issues, they CAN happen…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Map production traffic to the new version of your app.
At this point the old version of your app and the new version are both taking production traffic.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.003-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.003-medium.png&#34; alt=&#34;zero downtime graphics.003 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unmap production traffic from the old version of the app.  You can optionally delete the old version as well.
At this point the new version becomes production and ONLY it is taking traffic.
The new version still has two URL’s though, &lt;code&gt;myapp.mybluemix.net&lt;/code&gt; and &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt;.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.004-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.004-medium.png&#34; alt=&#34;zero downtime graphics.004 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove the temporary route &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt; from the new version of your app.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.005-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.005-medium.png&#34; alt=&#34;zero downtime graphics.005 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While this can be scripted there really isn’t a need to do that, there is a Cloud Foundry CLI plugin to do this.&lt;/p&gt;

&lt;h2 id=&#34;autopilot-plugin&#34;&gt;Autopilot plugin&lt;/h2&gt;

&lt;p&gt;Recently the Cloud Foundry CLI started supporting plugins.  This is the holy grail for CF and you can start doing some fun stuff.  In this case, the fun stuff is automating the complex, possibly human error-prone, steps above.  As a dev, if I can automate something and reduce the chance of something going wrong, I am all in.  If you do this, your IT/operations department will love you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/concourse/autopilot&#34;&gt;The plugin&lt;/a&gt; performs the above steps for you for performing the zero downtime deployment.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure you have a &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; account, if you do not sign up &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install dependencies.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Golang installed (&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;instructions&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Version 6.7.0 or greater of the Cloud Foundry CLI
To check what version you have running, run &lt;code&gt;cf -v&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[01:36 PM] jsloyer@jeffs-mbp-2 [~]&amp;gt;cf -v
cf version 6.8.0-b15c536-2014-12-10T23:34:29+00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To upgrade go &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ensure you have an app running/already deployed.  The plugin requires that you have an app already deployed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following.  I will describe what each line is doing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/concourse/autopilot
cf install-plugin $GOPATH/bin/autopilot
cf login -a ${CF_API} -u ${CF_USERNAME} -p ${CF_PASSWORD} -o ${CF_ORG} -s ${CF_SPACE}
cf zero-downtime-push myapp -f manifest.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Line 1 fetches the source code for the plugin.
Line 2 installs the plugin
Line 3 logins into Bluemix.  I have the sensitive information replace with environment variables.
Line 4 performs the zero down time deployment.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The plugin does require a &lt;code&gt;manifest.yml&lt;/code&gt;.  The plugin basically views the &lt;code&gt;manifest.yml&lt;/code&gt; files as the truth of the state of the application.&lt;/p&gt;

&lt;h2 id=&#34;extensions-with-ci-pipelines&#34;&gt;Extensions with CI Pipelines&lt;/h2&gt;

&lt;p&gt;This will be forthcoming in an upcoming blog post on how to use some of the most popular CI engines out there.&lt;/p&gt;

&lt;h2 id=&#34;recap&#34;&gt;Recap&lt;/h2&gt;

&lt;p&gt;Just to review what we did here, we learned what zero down time deployments are, why they are crucial to any Internet scale application, and how to perform a zero down time deployment.  Then, we took it a step further on how to use a Cloud Foundry plugin to do the heavy lifting for us and automate the zero down time deployment.&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;video&#34;&gt;Video&lt;/h2&gt;

&lt;p&gt;I have also published a video if you prefer to watch that instead, please check out &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/&#34;&gt;Zero Downtime Deployment with the CF Autopilot Plugin – Video.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;additional-part-s&#34;&gt;Additional part&amp;rsquo;s&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix-and-codeship/&#34;&gt;Zero downtime deployments with Bluemix and Codeship&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IoT Python app with a Raspberry Pi and Bluemix</title>
      <link>http://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/</link>
      <pubDate>Thu, 02 Apr 2015 10:29:53 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/</guid>
      <description>

&lt;p&gt;This is an extension/continuation from the blog post on how to create a &lt;a href=&#34;http://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/&#34;&gt;basic Python webapp&lt;/a&gt;.  In this tutorial we are going to go through how to integrate a Python Flask webapp in Bluemix with the &lt;a href=&#34;https://internetofthings.ibmcloud.com/&#34;&gt;Internet of Things Foundation&lt;/a&gt; in Bluemix with a Raspberry Pi and two sensors on the Raspberry Pi.  The tutorial also uses Twilio to interact with the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;So what does this look like?  Here is a simple architecture diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/raspberrypidiagram-medium.png&#34; alt=&#34;raspberrypidiagram IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;In the above diagram there is two flows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first flow involves pressing a HTML button in the Python Flask app in Bluemix to either turn on or off an LED on the Raspberry Pi.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The second flow involves pressing a physical button on the breadboard on the Raspberry Pi and using the IoT service in Bluemix and our app in Bluemix it will send a text message of our choosing to a phone number we enter in the Python Flask app in Bluemix using Twilio.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This all took only about 100 lines of code, pretty cool huh?&lt;/p&gt;

&lt;p&gt;If you prefer to watch a video of this instead of going through the written steps in this tutorial, check out the video below.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;There is two parts to setting this up.  If we take a look at the architecture diagram above we see that there is a Raspberry Pi piece and then a Bluemix piece.  We are going to go through the Raspberry Pi piece first then we will go through the Bluemix piece.&lt;/p&gt;

&lt;h2 id=&#34;raspberry-pi-setup-steps&#34;&gt;Raspberry Pi Setup Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sign up for a Bluemix account, visit &lt;a href=&#34;http://bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp&#34;&gt;http://bluemix.net&lt;/a&gt; in your web browser and click “Sign-up” in the top right.  We require a couple bits of information&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for an email to arrive, it should only take a couple minutes.  There should be a link in the email that says “Click here to complete your registration”, click that.  Sign in with the username and password you created from step 1.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Obtain a Raspberry Pi, a bread board, wires, a LED, and a button  (your best bet is getting a starter kit such as the &lt;a href=&#34;http://www.canakit.com/&#34;&gt;Canakit&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Place an LED in the breadboard (place the shorter side to the left)&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/led-medium.png&#34; alt=&#34;led IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Place a 220 ohm resistor in the breadboard connecting the short side (the left side of the LED) to the ground rail (the rail with the – sign).  Make sure to place the side of the resistor with the red stripes closest to the LED&lt;em&gt;NOTE:&lt;/em&gt; The way the breadboard works is connections run vertically not horizontally&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/resistor-medium.png&#34; alt=&#34;resistor IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect a wire from the ground rail to the GND on the pinout board&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/ground-medium.png&#34; alt=&#34;ground IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the right side of the LED, connect a wire to the the port labeled 17.&lt;strong&gt;NOTE:&lt;/strong&gt; The way the breadboard works is connections run vertically not horizontally.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/gpio17-medium.png&#34; alt=&#34;gpio17 IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Place the button in the breadboard, it takes a bit of force to press it in all the way.  It won’t break it.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/button-medium.png&#34; alt=&#34;button IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect a wire from the right side of the button to the ground rail.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/buttonground-medium.png&#34; alt=&#34;buttonground IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect a wire from the ground rail to a GND port, it doesn’t matter which one it is&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/buttongroundrail-medium.png&#34; alt=&#34;buttongroundrail IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lastly, connect a wire from the left side of the button to GPIO port 18.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/gpio18-medium.png&#34; alt=&#34;gpio18 IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to either use the console for our Raspberry Pi and the terminal application on the device itself or use SSH.  I am going to use SSH.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To get the IP address of your Raspberry Pi the easiest thing is to open up the terminal app on the Raspberry Pi, it is under accessories -&amp;gt; Terminal&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;code&gt;ifconfig&lt;/code&gt;..  If you are connected over Ethernet the IP address will be under eth0, if you are connected over wifi, the IP address will be under wlan0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to ssh into the device.—Windows, download Putty and use that to connect to the IP address—Mac and Linux, open the Terminal app, type &lt;code&gt;ssh pi@myipaddress&lt;/code&gt; where myipaddress is the IP address of the Raspberry Pi, ex. &lt;code&gt;192.168.1.65&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The password is raspberrypi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to run some commands to update our Raspberry Pi, run the following.  It will ask you to confirm with the “Y” key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo-apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to install a helper library for using GPIO&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://git.drogon.net/wiringPi
cd wiringPi
./build
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to install the IoT library on the Raspberry Pi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -LO https://github.com/ibm-messaging/iot-raspberrypi/releases/download/1.0.2/iot_1.0-1_armhf.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sudo dpkg -i iot_1.0-1_armf.deb&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to get the device ID of our raspberry Pi do this run the following and save the output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service iot getdeviceid
#example output
The device id is b827eba5b236
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will want to copy the id &lt;code&gt;b827eba5b236&lt;/code&gt;, yours obviously will be different&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up a web browser and goto &lt;a href=&#34;http://bluemix.net/&#34;&gt;bluemix.net&lt;/a&gt;, and click on “Catalog” in the top.  Scroll down to the very bottom and click “Internet of Things”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give the service a name, use iot-python (you must do this exactly or later things won’t work), for App choose “Leave unbound”, click “Create”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the left of the next page click “Launch dashboard”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the top click on “Devices”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click “Add Device”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the second field (it says e.g. mydevice type) type in exactly &lt;code&gt;raspberrypi&lt;/code&gt; (you need to have it spelled like this or there will be issues).  For device ID paste in the device ID we got from step 20, mine is &lt;code&gt;b827ba5b236&lt;/code&gt;.  Click continue.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the next page it will show something like below, copy this and switch back to terminal on your Raspberry Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org=pwftki
type=raspberrypi
id=000000000000
auth-method=token
auth-token=cXQaGx8o!a9HwxM-ka
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose your favorite text editor but I am going to use vi.  Type the following to open the file we want to edit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/iotsample-raspberrypi/device.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To paste the text press the “i” key.  Then paste the text, this will depend on the OS you are on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To save the file hit the “Esc” key.  Then Type “:wq” and then press “Enter”.  That will save the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let’s restart the IoT service on our Raspberry Pi to start sending the data to the IoT service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service iot restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to download the Python code to run on the Raspberry Pi, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
git clone https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git
cd python-iot-raspberry-pi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we need to install the package manager for Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pip
sudo pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One last bit, we need a config file for our app before we can start it.  Lets run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi ~/device.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remember this is vi again, so remember the shortcuts for inserting text and saving it from step 29,30.  The contents of the file should look something like below, replacing yourapikey, yourdeviceid, youriotorg, and yourapitoken with the correct values. To generate the API key and token we can get them from going back to the web browser and going to the Internet of Things Foundation.  At the top  click on API Keys.  Click “New API Key”.  The values that it gives you will be the values you use for the yourapitoken and yourapikey. &lt;code&gt;yourdeviceid&lt;/code&gt; is the value we got from step 20 &lt;code&gt;youriotorg&lt;/code&gt; is from step 27, it is also in your config file; in my case my value is pwftki. Let’s save the file (remember, “Esc”, “:wq”, “Enter”)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[application]
org=youriotorg
id=yourdeviceid
auth-method=apikey
auth-key=yourapikey
auth-token=yourauthtoken
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OK, so now we can launch/start the app on the Raspberry Pi.  To do that run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/python-iot-raspberry-pi
sudo python client.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;bluemix-app-setup-steps&#34;&gt;Bluemix App Setup Steps&lt;/h2&gt;

&lt;h6 id=&#34;note-the-following-steps-are-to-be-run-on-your-desktop-not-the-raspberry-pi&#34;&gt;NOTE:  The following steps are to be run on your desktop NOT the Raspberry Pi.&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We will need to install the Cloud Foundry CLI to deploy our app to Bluemix.  To do this head over to &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;https://github.com/cloudfoundry/cli/releases&lt;/a&gt;.  Choose the appropriate installer for your platform, download it and run the installer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So let’s open up a new terminal Window, we will need to do the rest on our development machine/laptop.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to download the Python code for our app.  Run the following.  If you don’t have git installed follow these instructions &lt;a href=&#34;http://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git
cd python-iot-raspberry-pi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your web browser go back to the tab that you have Bluemix open with.  In the top click “Catalog”, scroll down to find “Twilio”.  Click on that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you already have a Twilio account and want to use that skip to step 6.  If you don’t have a Twilio account on the right hand side click “Register at Twilio”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Twilio will ask you for some information and you will need to verify your phone number.  This is important as only numbers verified with the free plan will work with your app.   If you want to be able to text any number you need to pay for Twilio, its $1/month/phone number.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you are signed up for your account, head to &lt;a href=&#34;https://www.twilio.com/user/account/voice-messaging&#34;&gt;https://www.twilio.com/user/account/voice-messaging&lt;/a&gt;.  Near the top right there will be a twistie that says “Show API Credentials”, click that.  There is two pieces of information here, the Account SID and Auth Token.  We will need to copy these back to the Bluemix tab we have open with Twilio.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Paste your Account SID in the field in Bluemix that says Account SID, paste your Auth Token in the Auth Token field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the Service name you must type in this exactly iot-twilio&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the App, choose “Leave Unbound”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Create.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Switch back to the terminal that you have on your local dev machine, not your Raspberry Pi.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to login to Bluemix, to do that, type &lt;code&gt;cf login -a https://api.ng.bluemix.net&lt;/code&gt;. It will ask you for your username and password. This is from step 1 in the Raspberry Pi section above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To deploy our application all we need to do now is type &lt;code&gt;cf push myappname&lt;/code&gt; where myapp name is a unique name you choose for your app.&lt;em&gt;NOTE:&lt;/em&gt; If you get an error mentioning a route is taken, choose a different name and run &lt;code&gt;cf push&lt;/code&gt; with a new app name.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take about a minute or two to deploy your application but eventually you will get some output that looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: testapp-jbs.mybluemix.net
last uploaded: Fri Jul 31 00:25:17 UTC 2015
stack: lucid64
buildpack: SDK for Node.js(TM) (ibm-node.js-0.12.7)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a row that says &lt;code&gt;urls:&lt;/code&gt;, copy that URL and paste it into your browser.&lt;/p&gt;

&lt;p&gt;If everything went well you should have a page that looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/pythoniotapp-medium.png&#34; alt=&#34;pythoniotapp IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;

&lt;p&gt;An important note here, do not press the button on the Raspberry Pi until you enter a phone number and text message here, if you do the app will crash.  If you do this you can restart you app with &lt;code&gt;cf restart myappname&lt;/code&gt;, where myappname is the name of the app you chose above.&lt;/p&gt;

&lt;p&gt;When you click the “On” button it should turn the light on for you.  If you press the “Off” button it should turn the light off.&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Follow us on Twitter at &lt;a href=&#34;https://twitter.com/IBMBluemix&#34;&gt;@IBMBluemix&lt;/a&gt; and follow the author of this blog post (Jeff Sloyer, one of our developer advocates) at &lt;a href=&#34;https://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Hello World Python App using Flask</title>
      <link>http://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/</link>
      <pubDate>Mon, 30 Mar 2015 10:17:51 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/</guid>
      <description>

&lt;p&gt;Hey Y’all!  Jeff here again, today we are going to be going through some really simple steps to get started deploying a simple hello world python app using Flask on Bluemix.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; is an awesome and really lightweight framework in Python to create powerful webapps.  We are going to use it make a really simple hello world app in Python though.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;In this post we are going to go through the written instructions on how to do it but if you prefer watching a video check out the video below.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/b-SF3bgaQTw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In this tutorial we are going to go through two steps to deploy the app.  One is a simple click a button to deploy to your app, we will go through that first.  The second approach is a little more in depth and involves installing a command line tool to upload the application.  This is great and preferred if you will be editing the code or you want to dig into the nuts and bolts of things.&lt;/p&gt;

&lt;h2 id=&#34;simple-getting-started-steps&#34;&gt;Simple Getting Started Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sign up for a Bluemix account, visit &lt;a href=&#34;http://bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp&#34;&gt;http://bluemix.net&lt;/a&gt; in your web browser and click “Sign-up” in the top right.  We require a couple bits of information&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for an email to arrive, it should only take a couple minutes.  There should be a link in the email that says “Click here to complete your registration”, click that.  Sign in with the username and password you created from step 1.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the button below (this will deploy the app for you).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bluemix.net/deploy?repository=https%3A%2F%2Fgithub.com%2FIBM-Bluemix%2Fpython-hello-world-flask.git&amp;amp;cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/03/button-medium.png&#34; alt=&#34;button Simple Hello World Python App using Flask&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will come to a page that has a button called “Login”.  Go ahead and click that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next you will be taken to a page that asks you to create an alias.  If my email address was jeff.davis251@gmail.com I would use jeffdavis251.  Hint it doesn’t like periods &lt;img src=&#34;http://www.jeffsloyer.io/images/2015/03/icon_smile-medium.gif&#34; alt=&#34;icon smile Simple Hello World Python App using Flask&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Create.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take you to another page, click “Continue”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now everything is basically setup, it will take us to a page that looks like what is below, just click the “Deploy” button.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/03/deploybutton1-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/03/deploybutton1-medium.png&#34; alt=&#34;deploybutton1 1024x541 Simple Hello World Python App using Flask&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Grab a cup of coffee or take a bathroom break, well a quick one!  It will only take a minute or two to deploy the app.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a hot second you should be taken to a page that looks like what is below.  To view your hello world app just click the button “View your App”.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/03/deploy-done-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/03/deploy-done-medium.png&#34; alt=&#34;deploy done 1024x544 Simple Hello World Python App using Flask&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thats it for the quick and easy steps.  Let’s go through the more advanced steps where you can modify the code and upload the app from your own machine.&lt;/p&gt;

&lt;h2 id=&#34;a-little-more-involved-steps&#34;&gt;A little more involved steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This will assume you have signed up for an account, steps 1 and 2 from above.  If you haven’t signed up for an account scroll up and do that now.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Git, follow the instructions from &lt;a href=&#34;http://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the Cloud Foundry command line.  Choose the appropriate installer from &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;here&lt;/a&gt; and download it and run the installer.  You might be asking what Cloud Foundry is, its the open source Platform as a Service that Bluemix is built on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up the terminal/command prompt
Mac – Click on the finder icon in the top right, search for terminal and open that
Linux – Depends on your distro, but you probably know where it is, in the menu look for accessories usually then terminal, open that
Windows – Click the start button, search for cmd, open that&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type the following.  The following commands downloads the starter app and puts us into the right directory to deploy the app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/IBM-Bluemix/python-hello-world-flask.git
cd python-hello-world-flask
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to login to Bluemix, we will use the terminal window that we already have open for this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.ng.bluemix.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It will ask for your username and password, this is the one you just created.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Last step, we just need to upload the app, run the following replacing myappname with the URL you want your app to be available at.  Bluemix will give you a URL based on this name.  If I chose jeff-is-awesome, my app would be available at &lt;a href=&#34;http://jeff-is-awesome.mybluemix.net&#34;&gt;http://jeff-is-awesome.mybluemix.net&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push myappname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you get an error mentioning something like below, that means someone already has an app using that URL, just choose another one and rerun the command&lt;/p&gt;

&lt;h4 id=&#34;error&#34;&gt;Error:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;[01:54 PM] jsloyer@Jeffs-MacBook-Pro [python-hello-world-flask]&amp;gt;cf push jeff-is-awesome
Creating app jeff-is-awesome in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...
OK

Creating route jeff-is-awesome.mybluemix.net...
FAILED
Server error, status code: 400, error code: 210003, message: The host is taken: jeff-is-awesome
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fix&#34;&gt;Fix:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;cf push myappname-unique
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will basically get some output that looks like the following.  It will give you the URL to access your app.  In this case the URL to my app is &lt;code&gt;http://jeff-is-awesome2.mybluemix.net&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[02:05 PM] jsloyer@Jeffs-MacBook-Pro [python-hello-world-flask]&amp;gt;cf push jeff-is-awesome2
Updating app jeff-is-awesome2 in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...

... snip ...

App jeff-is-awesome2 was started using this command `python hello.py`

Showing health and status for app jeff-is-awesome2 in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;To recap we just went through two different ways to deploy a python app to Bluemix.  The first method is really quick so you can see the power of the platform and get something up and running quick.  The second approach used the command line so you can modify the app and hack on it and customize it.&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Follow us on Twitter at &lt;a href=&#34;http://twitter.com/IBMBluemix&#34;&gt;@IBMBluemix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow the author of this blog post (Jeff Sloyer, one of our developer advocates) at &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Control home devices with Bluemix Internet of Things</title>
      <link>http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</link>
      <pubDate>Fri, 06 Feb 2015 09:49:21 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</guid>
      <description>

&lt;p&gt;The number of Internet connected devices is growing dramatically, it is expected to increase from 15 billon devices in 2015 to 40 billion devices in 2020.  These devices make up something called the Internet of Things.  These devices can be controlled remotely and interconnected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/iotdevicesincrease-medium.png&#34; alt=&#34;iotdevicesincrease Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While a lot of these devices can be connected to the Internet, most of them are &amp;ldquo;dumb&amp;rdquo; devices right now.  To turn these &amp;ldquo;dumb&amp;rdquo; devices into smart devices you can use the &lt;a href=&#34;http://internetofthings.ibmcloud.com&#34;&gt;Internet of Things&lt;/a&gt; to connect them to the cloud.  Simple things such as a washing machine or a coffee pot can be connected to the Internet.  More practical systems can be connected also, such as a home automation system or a thermostat.  Going even further a mine could connect safety sensors to the Internet of Things as well.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The Internet of Things allows for these devices to either be controlled or act as sensors and provides a means for them to communicate.  This is done over a protocol called MQTT. According to &lt;a href=&#34;http://mqtt.org/&#34;&gt;mqtt.org&lt;/a&gt;, &amp;ldquo;MQTT is a machine-to-machine (M2M)/Internet of Things connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport.&amp;rdquo;  This works great for many devices as-is, doesn’t have many dependencies, it is very lightweight, and doesn’t require tremendous amounts of processing power.&lt;/p&gt;

&lt;p&gt;IBM Bluemix provides a platform for creating these apps that utilize all these sensors.  You can basically almost use any programming language you want, Bring Your Own Language (BYOL) and utilize services that do the heavy lifting for you.  This heavy lifting is the Internet of Things (IoT) service in Bluemix.  It implements that MQTT protocol and allows you to control and receive data from these devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/robots-blog-post-header1-medium.jpg&#34; alt=&#34;robots blog post header1 1024x665 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do you have a bunch of left over Christmas lights sitting around that will be collecting dust till next year? Until now Christmas lights are a once a year thing, that isn’t true anymore.  Time to get the dust off of your lights and use them for something fun! Enter Christmas Lights controlled by a Raspberry Pi via IoT in Bluemix!&lt;/p&gt;

&lt;p&gt;You can control these Christmas Lights using the Internet of Things and IBM Bluemix. Who &lt;em&gt;doesn’t&lt;/em&gt; love large amounts of Christmas lights?  I sure love them.  Add on to that syncing lights to music and the ability to control lights from your phone and giving passersbys the ability to vote for songs they wanna see the lights synced to by texting.  How cool is that?&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction:&lt;/h2&gt;

&lt;p&gt;This is going to be a three part series: The first part (this post) will focus on the hardware setup, all the wiring and connecting things up to the Raspberry Pi.  The second part will focus on the software configuration of the Raspberry Pi, and the final part will focus on the Bluemix app that allows people to vote on songs to play and the integration to control the Raspberry Pi with the IoT service in Bluemix.&lt;/p&gt;

&lt;p&gt;So some of our goals that we are going to accomplish are the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Part 1&lt;/strong&gt; – Setup and wire together relays, outlets, and the Raspberry Pi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/&#34;&gt;&lt;strong&gt;Part 2&lt;/strong&gt;&lt;/a&gt; – Power on the Raspberry Pi, installed Raspbian (OS for the Pi), install and configure the lighting control software&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Part 3&lt;/strong&gt; – Deploy a Bluemix app with the IoT, Twilio, and Cloudant services to interact with users and the Raspberry Pi (an example of the app is &lt;a href=&#34;http://lights.mybluemix.net/&#34;&gt;http://lights.mybluemix.net/&lt;/a&gt;; please note this is not connected to my Raspberry Pi right now, so clicking the play button won’t do anything.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a little teaser of the expected outcome:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_nWcIvOSNJE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Let’s jump into it…&lt;/p&gt;

&lt;h2 id=&#34;part-1-setting-up-the-hardware&#34;&gt;Part 1: Setting up the hardware&lt;/h2&gt;

&lt;p&gt;These instructions have been adapted from the following sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/&#34;&gt;https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI&#34;&gt;https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://lightshowpi.org/download-and-install&#34;&gt;http://lightshowpi.org/download-and-install&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://lightshowpi.org/configuring-and-testing-your-hardware&#34;&gt;http://lightshowpi.org/configuring-and-testing-your-hardware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://lightshowpi.org/play-music&#34;&gt;http://lightshowpi.org/play-music&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is getting a Raspberry Pi, I highly recommend getting the &lt;a href=&#34;http://www.amazon.com/CanaKit-Raspberry-Ultimate-Starter-Components/dp/B00G1PNG54/&#34;&gt;CanaKit on Amazon&lt;/a&gt;.  It comes with most of everything you will need.  Depending on how fancy and clean you want your wiring to look you will need to take a trip to your local hardware/electrical store, more on that later.&lt;/p&gt;

&lt;p&gt;The first step is deciding how many individual light channels you want—you can do up to 48 actually, but for this post we will doing 16 channels.  What that means is 16 individual strands of lights that can be controlled.  So let’s make a shopping list.&lt;/p&gt;

&lt;p&gt;Shopping List:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;8 two gang outlets&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 4 gang blue plastic outlet boxes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;50 feet of 12 gauge electrical wire&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 bags of assorted wire nuts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 relays (1 relay per each 8 light channels, available &lt;a href=&#34;http://www.amazon.com/gp/product/B006J4G45G/&#34;&gt;on Amazon&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;1 powerstrip&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 electrical extension cords&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;16 strands of Christmas lights&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tools Required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Wire Stripper&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Screw Drivers (phillips and flat)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Multimeter (optional)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My brother (&lt;a href=&#34;https://twitter.com/esloyer&#34;&gt;@esloyer&lt;/a&gt;) helped me wire this whole thing up and came up with an adapted wiring schema based off the sites above, thanks bro!&lt;/p&gt;

&lt;p&gt;Once you get all the items on the shopping list we need to start taking apart the 50 feet of wire, there is 2 wires inside of the casing, a black and then a white one.  We need to get them out of the casing, take a pocket knife or utility knife and make a cut into the casing at one end, you can basically then peal back the casing on the whole 50 feet of wire then.&lt;/p&gt;

&lt;p&gt;Below is a wiring diagram that we need to complete.  You can do this multiple ways but below is a suggestion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/Capture-medium.png&#34; alt=&#34;Capture 1024x642 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What we need to do is basically daisy chain all the &amp;ldquo;hot&amp;rdquo; wires together between each set of 4 gang double gang outlets.  We do this so we don’t overload a particular circuit.  So to do this we need to cut the end off of our cheap extension cord that has a plug on it, we need to then strip the wires, and then identity which wire is the hot/positive wire.  Below is a picture of a wire, the hot/positive wire will have dashes or stripes on it, the cold/neutral wire will NOT have any dashes or stripes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/electrical-cord-medium.jpg&#34; alt=&#34;electrical cord 1024x764 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We need to take the hot wire and put it into a wire nut.  We will then take some wire from our 50 feet, strip one of the ends and twist it into the wire nut.  This will get attached to positive input on the relay.  We need to repeat this for each channel.  In the picture below I have an additional wire going from the first wire nut to another wire nut because all the wires going to the relay wouldn’t fit into one wire nut.  We are just effectively connecting two wires together here.&lt;/p&gt;

&lt;p&gt;The next step is running a wire from each channel on the relay to electrical outlet.  This is the hot wire to each outlet but this wire is being controlled by the relay.  Think of the relay as a simple on/off switch that you would find at home to control a light.  On most double electrical outlets there is a tab on the side that comes enabled that makes most receptacles operate as one, this is desirable in a house so an electrician only has to run one wire to the outlet but in our case we want to take advantage of controlling both receptacles.  We need to break this tab on both sides of the outlet.  Take a pair of needle nodes pliers and bend the tab back and forth and eventually it will come off.  See the photos below.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/FH13MAR_SWIOUT_14-medium.jpg&#34; alt=&#34;FH13MAR SWIOUT 14 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/electrical-outlet-garbage-disposal-5-medium.jpg&#34; alt=&#34;electrical outlet garbage disposal 5 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/electrical-outlet-garbage-disposal-4-medium.jpg&#34; alt=&#34;electrical outlet garbage disposal 4 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So next we need to connect our cold/negative wires to each of the outlets.  If you look at the wiring diagram (above) I have one cold/neutral wire going to the first outlet and each additional outlet is daisy chained to it.  This is just to complete the circuit.  Below is the finished product.  We basically have our outlets daisy chained together with our cold/neutral wires and then hold/positive wires have individual channels to the relay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/2014-12-02-15.16.57-medium.jpg&#34; alt=&#34;2014 12 02 15.16.57 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations the hard part is over! Well, at least for me, since electrical stuff isn’t my forte.&lt;/p&gt;

&lt;h2 id=&#34;parts-in-the-series&#34;&gt;Parts in the Series&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Etherpad in Cloud Foundry – Quick Start Guide</title>
      <link>http://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/</link>
      <pubDate>Sat, 03 Jan 2015 22:19:30 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/</guid>
      <description>

&lt;p&gt;Etherpad Lite is an awesome online collaboration platform.  Multiple open source projects use it for collaboration.  One of the most notable ones is the Openstack Project &lt;a href=&#34;https://etherpad.openstack.org/&#34;&gt;Openstack Etherpad&lt;/a&gt;. To help you navigate the setup, this post provides step-by-step instructions to get things running. You may have read that Etherpad is complicated to install in a PaaS and there really isn’t a comprehensive quick start guide for running Etherpad-lite in Cloud Foundry. No worries, here is one!&lt;/p&gt;

&lt;h3 id=&#34;login-register-for-bluemix&#34;&gt;Login/Register for Bluemix&lt;/h3&gt;

&lt;p&gt;The first step is creating a Node.js app in Bluemix.  Let’s login to Bluemix, open a web browser and visit &lt;a href=&#34;http://bluemix.net/&#34;&gt;Bluemix&lt;/a&gt; and click LOG IN.  If you don’t have an account click, SIGN UP.  Since Etherpad-Lite is built using Node.js, we want to start with an empty Node.js app in Bluemix.  We will do this from the command line.&lt;/p&gt;

&lt;p&gt;If you already have the CLI command line executable, you can skip this step.  If you don’t have it, follow the steps from the &lt;a href=&#34;https://www.ng.bluemix.net/docs/#cli/index.html#cli&#34;&gt;Bluemix docs&lt;/a&gt; on how to install the command line for your platform and how to set it up.  Once you get things setup you should be able to run &lt;code&gt;cf s&lt;/code&gt; and get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[01:30 PM] jsloyer@jeffs-mbp [blah]&amp;gt;cf s
cf domains Getting domains in org jbsloyer@us.ibm.com as ...
name status
mybluemix.net shared
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your output will be slightly different (this is ok).  This was just a check to make sure things are setup correctly.  If you are getting an auth error or error that you aren’t pointing to Cloud Foundry, refer back to the docs, reply to this post, or post a question to &lt;a href=&#34;http://stackoverflow.com/questions/tagged/bluemix&#34;&gt;Stackoverflow&lt;/a&gt; for help.&lt;/p&gt;

&lt;h3 id=&#34;upload-etherpad-lite-code-to-bluemix&#34;&gt;Upload Etherpad-Lite Code to Bluemix&lt;/h3&gt;

&lt;p&gt;OK, next we need to upload the Etherpad-Lite code to Bluemix. The version of Etherpad-Lite is a forked version of the Etherpad code that has made things easy for us with Cloud Foundry. So head on over to the &lt;a href=&#34;https://github.com/cloudfoundry-community/etherpad-lite-cf/releases&#34;&gt;releases page&lt;/a&gt; for &lt;code&gt;etherpad-lite-cf&lt;/code&gt;.  Choose the latest, as of this writing it was version 1.4.1.  Download the etherpad-lite-cf.zip file.  We need to extract this file to a new folder—do not extract it in the folder it is sitting in.  For example, I extracted it into an empty folder called blah.  Make sure you do not have the zip file you downloaded in the newly created folder, it should just contain the extracted files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10:50 AM] jsloyer@jeffs-mbp [blah]&amp;gt;pwd
/Users/jsloyer/Downloads/blah
[10:50 AM] jsloyer@jeffs-mbp [blah]&amp;gt;ls
CHANGELOG.md Procfile node_modules src var
CONTRIBUTING.md README.md package.json start.bat
LICENSE bin settings.json tests
Makefile doc settings.json.template tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is pushing the app to Bluemix.  Run the following command, replacing yourappname with a unique name for your app.  This name will also be the url to your app as well.  If you get an error mentioning the host is taken, just choose a different name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push yourappname -m 512M -b https://github.com/cloudfoundry/nodejs-buildpack.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is saying we are giving our app 512MB of memory and calling out a specific buildpack to use (in this case Node.js). This step will take awhile but eventually you should get the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running
App started Showing health and status for app jbs-etherpad3 in org jbsloyer@us.ibm.com / space demos as ...
OK
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: jbs-etherpad3.mybluemix.net
state since cpu memory disk
#0 running 2015-01-13 10:36:32 AM 0.0% 87.2M of 512M 242.1M of 1G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you visit the url from above, Etherpad will be functional, however it is using a built-in database and this isn’t what we want.  We want to back in with MySQL.&lt;/p&gt;

&lt;h3 id=&#34;create-and-bind-a-database-to-our-app&#34;&gt;Create and bind a database to our app&lt;/h3&gt;

&lt;p&gt;Next, we need to create a service to allow Etherpad to connect to our database.  To do that, let’s go back to the Bluemix UI.  In the top click on Dashboard, you should see the app you created.  Let’s go ahead and click on it.&lt;/p&gt;

&lt;p&gt;To add the service Bluemix will provision and bind a service to our app for us.  Click &amp;ldquo;Add A Service&amp;rdquo; and scroll down to data management.  We want ClearDB for this app.  Click on ClearDB.  ClearDB is a hosted version of MySQL.  Everything on the right should be pre-populated so let’s just click &amp;ldquo;Create&amp;rdquo;.  If things are not pre-populated, choose the appropriate app, the one we just created.&lt;/p&gt;

&lt;p&gt;It will ask if you want to restage the app, that is fine, so click RESTAGE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/restage-medium.jpg&#34; alt=&#34;restage Etherpad in Cloud Foundry – Quick Start Guide&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;configure-the-app-with-cleardb-mysql&#34;&gt;Configure the app with ClearDB (MySQL)&lt;/h3&gt;

&lt;p&gt;To switch the app over to MySQL, we need to edit the &lt;code&gt;settings.json&lt;/code&gt; for the app and then re-upload the app to Bluemix. You will need to replace the value DATABASE on line 9 with the name of your ClearDB service.  To get this info, let’s go back to the Bluemix UI and our app.  If you click on &amp;ldquo;Show Credentials&amp;rdquo;, it will give you the name of your ClearDB service, copy this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/showcreds-medium.jpg&#34; alt=&#34;showcreds Etherpad in Cloud Foundry – Quick Start Guide&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the name, in this example it is &amp;ldquo;ClearDB MySQL Database-hu&amp;rdquo;, without quotes.  I have highlighted below what you need to copy, don’t copy the quotes.  I have hidden my connection info to my database so my database can’t be hacked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/dbname-medium.jpg&#34; alt=&#34;dbname Etherpad in Cloud Foundry – Quick Start Guide&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Open up settings.json with your favorite text editor and on line 9 replace DATABASE with the name of your ClearDB service that we copied from above.  Save the file. Here is my line 9:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;dbService&amp;quot;: &amp;quot;ClearDB MySQL Database-hu&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step is re-pushing our app to Bluemix since we made a change to it.  To do this we need to use the push command we used above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push yourappname -m 512M -b https://github.com/cloudfoundry/nodejs-buildpack.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eventually it should show us that our app is running, my output is below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running
App started Showing health and status for app jbs-etherpad3 in org jbsloyer@us.ibm.com / space demos as ...
OK
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: jbs-etherpad3.mybluemix.net
state since cpu memory disk
#0 running 2015-01-13 10:36:32 AM 0.0% 87.2M of 512M 242.1M of 1G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if we visit the url it gave us, Etherpad should be up and running.  If you run into issues please post a comment here or post to &lt;a href=&#34;http://stackoverflow.com/questions/tagged/bluemix&#34;&gt;Stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;ssl&#34;&gt;SSL&lt;/h3&gt;

&lt;p&gt;Bluemix provides SSL out of the box for your app.  If your app is running at &lt;strong&gt;http&lt;/strong&gt;://jbs-etherpad3.mybluemix.net you are given SSL for free.  To use SSL, just access your app over https, for my example it would be &lt;strong&gt;https&lt;/strong&gt;://jbs-etherpad3.mybluemix.net.  If you want to use SSL with your own domain name and certificate, you can do this also!  See &lt;a href=&#34;https://jeffsloyer.io/2014/08/18/inbound-ssl-in-bluemix/&#34;&gt;SSL Certificates and Bluemix Custom Domains&lt;/a&gt; on how to do it.&lt;/p&gt;

&lt;p&gt;For more info about SSL in for free in Bluemix check out the following video.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3Y0wLQcXbQ0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The biggest issue to me is that this deployment of Etherpad only allows 1 instance. While this works for development and testing, it is not suitable for production.  This is a limitation right now of Etherpad in the way it uses socket.io and sessions. If you need more capacity, just bump up your RAM for your app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;instructions-adapted-from-these-references&#34;&gt;Instructions adapted from these references&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/cloudfoundry-community/etherpad-lite-cf#using-database-from-user-provided-service&#34;&gt;https://github.com/cloudfoundry-community/etherpad-lite-cf#using-database-from-user-provided-service&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://arthurh.fr/blog-Install-etherpad-lite-with-cloudfoundry&#34;&gt;http://arthurh.fr/blog-Install-etherpad-lite-with-cloudfoundry&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building a Java EE app on IBM Bluemix Using Watson, Cloudant</title>
      <link>http://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/</link>
      <pubDate>Tue, 14 Oct 2014 22:36:53 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/</guid>
      <description>

&lt;p&gt;Hey Y’all!&lt;/p&gt;

&lt;p&gt;Jeff here again and something I am really excited about is Watson is &lt;a href=&#34;https://developer.ibm.com/bluemix/2014/10/08/watson-on-bluemix&#34;&gt;now available for anyone to use in Bluemix!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we are going to be building an example app using Java, Cloudant, and Watson.&lt;/p&gt;

&lt;p&gt;Ok let’s talk through what this app is going to do before we build it.&lt;/p&gt;

&lt;p&gt;Meet Ivy (hello!)&lt;/p&gt;

&lt;p&gt;She’s a talent manager at a growing tech startup.&lt;/p&gt;

&lt;p&gt;She’s looking for a new hire that would be a good fit on her team but the company is so popular that she has a huge inventory of resumes to sort through. She’s looking for tools to help her, and tools beyond just simple tag filters.&lt;/p&gt;

&lt;p&gt;With Watson services she can also start to solve for a problem like, &amp;ldquo;I’m looking for another developer like &amp;ldquo;[insert cool employee].&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So in this case, the application can issue queries such as,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Find me a Developer like Craig Smith.Then search through all possible candidate and return a ranked list of candidates sorted by highest-to-lowest percentage of personality resemblance. From here, searches can be refined by including technical skills. Find me a Developer like Craig Smith, and knows Java, C and Python.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Ivy (HR Manager)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make sense??&lt;/p&gt;

&lt;p&gt;Ok let’s jump right in.&lt;/p&gt;

&lt;h2 id=&#34;pre-req-s&#34;&gt;Pre-req&amp;rsquo;s&lt;/h2&gt;

&lt;p&gt;First thing you need to do is clone the github project with some starter code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/IBM-Bluemix/talent-manager.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &lt;a href=&#34;https://github.com/IBM-Bluemix/talent-manager/archive/master.zip&#34;&gt;download a zip file&lt;/a&gt; if you don’t have git installed.&lt;/p&gt;

&lt;p&gt;Next we need to complete a couple pre-req steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers&#34;&gt;Download Eclipse EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html&#34;&gt;Download and install Java 1.7 JDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ng.bluemix.net/docs/#starters/install_cli.html?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-JavaEEWatsonCloudant-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Download and install the Cloud Foundry CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-JavaEEWatsonCloudant-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Sign up for a FREE IBM Bluemix account if you don’t have one yet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ok once we have all that setup we can start creating our app.&lt;/p&gt;

&lt;h2 id=&#34;create-the-application&#34;&gt;Create the application&lt;/h2&gt;

&lt;p&gt;First we need to sign into Bluemix, so open your browser and head on over to &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-JavaEEWatsonCloudant-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt;.  We need to login.  Up at the top lets go ahead and click on Catalog.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/catalog-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/catalog-medium.png&#34; alt=&#34;catalog 300x99 Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down a little and click on Liberty&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/liberty-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/liberty-medium.png&#34; alt=&#34;liberty 1024x585 Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the right hand side we need to give our app a name.  Please note that this name must be unique.  Also remember this name as we will need it later…&lt;/p&gt;

&lt;p&gt;Click create.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/new-app-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/new-app-medium.png&#34; alt=&#34;new app Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bluemix will start deploying our app and Bluemix will start our app.&lt;/p&gt;

&lt;p&gt;So next we need to add Cloudant and Watson to our app!&lt;/p&gt;

&lt;p&gt;So do you that make sure you are in the dashboard and have your app open like the screencap below.  We will then click the &amp;ldquo;Add A Service&amp;rdquo; button.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/add-service-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/add-service-medium.png&#34; alt=&#34;add service 1024x683 Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First let’s add Watson.  Scroll down until you find the &amp;ldquo;User Modeling&amp;rdquo; Service.  Go ahead and click that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/user-modeling-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/user-modeling-medium.png&#34; alt=&#34;user modeling 1024x342 Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, all we have to do is click &amp;ldquo;Create&amp;rdquo; on the right hand side.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/watson-create-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/watson-create-medium.png&#34; alt=&#34;watson create Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bluemix is going to ask us if we want to restage our app, we should click the &amp;ldquo;OK&amp;rdquo; button.  What Bluemix is asking us here is since we made a change to our app, the app needs to be restarted to bind in Watson.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/restage-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/restage-medium.png&#34; alt=&#34;restage Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let’s click &amp;ldquo;Add A Service&amp;rdquo; again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/addserviceagain-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/addserviceagain-medium.png&#34; alt=&#34;addserviceagain Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;
This time scroll down to the bottom and choose &amp;ldquo;Cloudant&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/cloudant-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/cloudant-medium.png&#34; alt=&#34;cloudant 1024x245 Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click &amp;ldquo;Create&amp;rdquo; on the right hand side.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/cloudantcreate-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/cloudantcreate-medium.png&#34; alt=&#34;cloudantcreate Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is going to ask us to restage our app again, go ahead and click &amp;ldquo;OK&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/cloudantrestage-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/cloudantrestage-medium.png&#34; alt=&#34;cloudantrestage Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have all our services added.  Let’s go ahead and start getting some data imported.&lt;/p&gt;

&lt;p&gt;On the dashboard for the app let’s go ahead and click on Cloudant.&lt;/p&gt;

&lt;h2 id=&#34;explanation-of-cloudant&#34;&gt;Explanation of Cloudant&lt;/h2&gt;

&lt;p&gt;So let’s pause and explain what Cloudant is.  Cloudant is a No-SQL database that is based on CouchDB.  The big difference between a relationship database and No-SQL database is illustrated below.  In the relationship database you have to have multiple tables to represent the data and have to use SQL and JOIN statements to get data from both tables.  In a No-SQL database which is commonly referred to as a document store database you stores JSON documents/data (as illustrated on the left below).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/Figure5a-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/Figure5a-medium.png&#34; alt=&#34;Figure5a Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So back to the demo&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;eclipse-steps&#34;&gt;Eclipse Steps&lt;/h2&gt;

&lt;p&gt;In Eclipse, right click on the project’s area on the left.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/import-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/import-medium.png&#34; alt=&#34;import Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under General click existing project into workspace and click next&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/existingproject-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/existingproject-medium.png&#34; alt=&#34;existingproject Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we want to find our project we downloaded from github.  We need to browse to the directory where it is.  Once you find the talent-manager folder, go one more level down into that into a folder called personafusion (as shown below). Click finish.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/finishimport-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/finishimport-medium.png&#34; alt=&#34;finishimport Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to make a couple code edits…&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/com.ibm.personafusion/Config.java&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Line 10 currently reads like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static final String CLOUDANT_NAME = &amp;quot;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It needs to be changed to what is below.  This is our Cloudant database name we created.  If you used something other than &amp;ldquo;talent-manager here&amp;rdquo; type that in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static final String CLOUDANT_NAME = &amp;quot;talent-manager&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead and save that file and close it.&lt;/p&gt;

&lt;p&gt;Next open &lt;code&gt;src/com.ibm.personafusion/CloudantClient.java&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need to update our constructor from what is below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public CloudantClient()
    {
        this.httpClient = null;

        //TODO read env VCAP_SERVICES and parse it into JSON
        this.port = Config.CLOUDANT_PORT;
        this.host = &amp;quot;&amp;quot;;
        this.username = &amp;quot;&amp;quot;;
        this.password = &amp;quot;&amp;quot;;
        this.name = Config.CLOUDANT_NAME;
        this.dbc = this.createDBConnector();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private JSONArray cloudant;
private JSONObject cloudantInstance;
private JSONObject cloudantCredentials;

  public CloudantClient()
  {
    this.httpClient = null;

     try {
        String VCAP_SERVICES = System.getenv(&amp;quot;VCAP_SERVICES&amp;quot;);
        JSONObject vcap;
        vcap = (JSONObject) JSONObject.parse(VCAP_SERVICES);

        cloudant = (JSONArray) vcap.get(&amp;quot;cloudantNoSQLDB&amp;quot;);
        cloudantInstance = (JSONObject) cloudant.get(0);
        cloudantCredentials = (JSONObject) cloudantInstance.get(&amp;quot;credentials&amp;quot;);
      } catch (IOException e) {
        e.printStackTrace();
      }
      this.port = Config.CLOUDANT_PORT;
      this.host = (String) cloudantCredentials.get(&amp;quot;host&amp;quot;);
      this.username = (String) cloudantCredentials.get(&amp;quot;username&amp;quot;);
      this.password = (String) cloudantCredentials.get(&amp;quot;password&amp;quot;);
      this.name = Config.CLOUDANT_NAME;
      this.dbc = this.createDBConnector();
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you notice we also added 3 global variables as well.&lt;/p&gt;

&lt;p&gt;Next we need to update the Watson code as well.  This is located in &lt;code&gt;src/com.ibm.personafusion/services/WatonUserModeler.java&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public WatsonUserModeller() {
    //TODO read env VCAP_SERVICES and parse it into JSON
    this.username = &amp;quot;&amp;quot;;
    this.password = &amp;quot;&amp;quot;;
    this.base_url = &amp;quot;&amp;quot;;
    this.profile_api = Config.WATSON_PROF_API;
    this.visual_api = Config.WATSON_VIZ_API;
    this.executor = Executor.newInstance().auth(username, password);
    if (this.executor == null)
    {
        System.err.println(&amp;quot;Authentication failed in WatsonUserModeller.&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static JSONArray watson;
private static JSONObject watsonInstance;
private static JSONObject watsonCredentials;

    private Executor executor;

    public WatsonUserModeller()
    {
        try {
            String VCAP_SERVICES = System.getenv(&amp;quot;VCAP_SERVICES&amp;quot;);
            JSONObject vcap;
            vcap = (JSONObject) JSONObject.parse(VCAP_SERVICES);

            watson = (JSONArray) vcap.get(&amp;quot;user_modeling&amp;quot;);
            watsonInstance = (JSONObject) watson.get(0);
            watsonCredentials = (JSONObject) watsonInstance.get(&amp;quot;credentials&amp;quot;);
            } catch (IOException e) {
                e.printStackTrace();
            }
        this.username = (String) watsonCredentials.get(&amp;quot;username&amp;quot;);
        this.password = (String) watsonCredentials.get(&amp;quot;password&amp;quot;);
        this.base_url = (String) watsonCredentials.get(&amp;quot;url&amp;quot;);
        this.profile_api = Config.WATSON_PROF_API;
        this.visual_api = Config.WATSON_VIZ_API;
        this.executor = Executor.newInstance().auth(username, password);
        if (this.executor == null)
        {
            System.err.println(&amp;quot;Authentication failed in WatsonUserModeller.&amp;quot;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, so the app is basically done, we need to build our war file now, on the left side in Eclipse, open build.xml.  On the right hand side right click build [default] and then &amp;ldquo;Run As&amp;rdquo; and then &amp;ldquo;Ant Build&amp;rdquo;.  This will generate our WAR file for us that we will deploy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/antbuild-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/antbuild-medium.png&#34; alt=&#34;antbuild 1024x528 Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the bottom it should say &amp;ldquo;BUILD SUCESSFULL&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/buildfinished-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/buildfinished-medium.png&#34; alt=&#34;buildfinished Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next and last step involves deploy your app to bluemix.  This step requires the Cloud Foundry CLI to be installed (if you haven’t done this yet scroll back up the pre-req’s section above).&lt;/p&gt;

&lt;p&gt;If you are on Windows open up the command prompt, if you are on a Mac or Linux open up the terminal.&lt;/p&gt;

&lt;p&gt;Type the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf login -a https://api.ng.bluemix.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will then ask for your username and password that you registered with for Bluemix. There are two important files in this directory.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;manifest.yml&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;webStarterApp.war&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to edit the &lt;code&gt;manifest.yml&lt;/code&gt; file and then we can deploy the app.
Open the file in your favorite text editor or you can use Eclipse as well. The contents of the file are below.
There are two important lines in here, host and name. These values need to be unique and match the app we deployed earlier. In my case the app name is talent-manager-awesome, so my file would then become what is below.&lt;/p&gt;

&lt;p&gt;This value comes from Bluemix, lets open the Bluemix dashboard in our web browser again.  In the screenshot below we can just copy the name of the app and paste this into the &lt;code&gt;manifest.yml&lt;/code&gt; file.  So don’t copy my apps name exactly as it won’t work, it needs to be your app’s unique name.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/appname-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/appname-medium.png&#34; alt=&#34;appname Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the final step we need to cd (change directory) in our command prompt or terminal to where the &lt;code&gt;manifest.yml&lt;/code&gt; and webStarterApp.war are located.  For me its located at &lt;code&gt;/Users/jsloyer/Downloads/talent-manager-master/personafusion&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Users/jsloyer/Downloads/talent-manager-master/personafusion
cf push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cf push command pushes our app to Bluemix, a bunch of text will fly bay saying its deploying and eventually it will say the app is starting and then it is up and running.  Bluemix will give you a URL you can access your app at.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/apprunning-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/apprunning-medium.png&#34; alt=&#34;apprunning Building a Java EE app on IBM Bluemix Using Watson and Cloudant &#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila!!!!  We created a Java web app using Cloudant and Watson on IBM Bluemix!&lt;/p&gt;

&lt;p&gt;Source Code:
&lt;a href=&#34;https://ibm.biz/talent-manager&#34;&gt;https://ibm.biz/talent-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feedback is welcome, please contact me on Twitter @jsloyer – &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;http://twitter.com/jsloyer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a video walkthrough of this demo please visit &lt;a href=&#34;http://ibm.biz/talent-manager-demo&#34;&gt;http://ibm.biz/talent-manager-demo&lt;/a&gt; or watch the video below!&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/9AFMY6m0LIU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This app was developed over the course of 48 hours at an internal hackathon. The developers and designers that worked on this are the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eva XIAOHUI LUO&lt;/li&gt;
&lt;li&gt;MICHAEL J. YOUNG&lt;/li&gt;
&lt;li&gt;SEAN J. WELLECK&lt;/li&gt;
&lt;li&gt;BRIAN T. HAN&lt;/li&gt;
&lt;li&gt;MICHAEL POPLAVSKI&lt;/li&gt;
&lt;li&gt;ALAN XIA&lt;/li&gt;
&lt;li&gt;Jeff Sloyer&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>