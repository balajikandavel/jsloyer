<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JeffSloyer.io</title>
    <link>http://www.jeffsloyer.io/index.xml</link>
    <description>Recent content on JeffSloyer.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <lastBuildDate>Wed, 29 Mar 2017 09:45:24 -0500</lastBuildDate>
    <atom:link href="http://www.jeffsloyer.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Cabin with the IBM Bluemix Container Service</title>
      <link>http://www.jeffsloyer.io/post/ibm-container-service-cabin/</link>
      <pubDate>Wed, 29 Mar 2017 09:45:24 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/ibm-container-service-cabin/</guid>
      <description>

&lt;p&gt;I haven&amp;rsquo;t posted in awhile because I have taken a new role at IBM and helped lead the development of the
new IBM Bluemix Container Service that allows you to run managed Kubernetes clusters on IBM.&lt;/p&gt;

&lt;p&gt;For a little background, IBM has introduced a managed Kubernetes Service, for more information
please read the announce post &lt;a href=&#34;https://www.ibm.com/blogs/bluemix/2017/03/kubernetes-now-available-ibm-bluemix-container-service/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.skippbox.com/cabin/&#34;&gt;Cabin&lt;/a&gt; is a pretty cool mobile app that lets you manage your Kubernetes cluster through your Android or iPhone.  Check out the video below on a walkthrough of Cabin.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/MzeEgu3gJRE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;h2 id=&#34;create-your-bluemix-account&#34;&gt;Create your Bluemix account&lt;/h2&gt;

&lt;p&gt;To get started you will first need a Bluemix account, head over to &lt;a href=&#34;http://bluemix.net&#34;&gt;bluemix.net&lt;/a&gt; and sign up.&lt;/p&gt;

&lt;h2 id=&#34;cli-setup&#34;&gt;CLI Setup&lt;/h2&gt;

&lt;p&gt;Once you sign up you will need to download our CLI.  Head over to &lt;a href=&#34;http://clis.ng.bluemix.net&#34;&gt;http://clis.ng.bluemix.net&lt;/a&gt; to download our installer.  Open the installer and go through the prompts to install the CLI.&lt;/p&gt;

&lt;p&gt;Once you have the CLI you will need to login to the CLI, to do that do the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bx login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will ask for your username and password.  If you have an account already it might ask you to select an account, org, and space.&lt;/p&gt;

&lt;p&gt;Once you are logged in you will need to download our plugin to create a Kubernetes cluster.  To do that do the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bx plugin install container-service -r Bluemix
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-your-kubernetes-cluster&#34;&gt;Create your Kubernetes Cluster&lt;/h2&gt;

&lt;p&gt;To create a free Kubernetes cluster run the following, replacing clustername with anything of your choosing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bx cs init
bx cs cluster-create --name clustername
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you had a paid account you can create a cluster with the following command.  It might ask you for VLAN&amp;rsquo;s.  If it does you can get your available VLAN&amp;rsquo;s by running &lt;code&gt;bx cs vlans dal10&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bx cs init
bx cs cluster-create --name clustername --datacenter dal10 --workers 3 --machine-type b1c.4x16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example of choosing your own VLAN&amp;rsquo;s you will see below.  Also, you can customize the machine type by listing all the available machine types, run &lt;code&gt;bx machine-types dal10&lt;/code&gt;.  &lt;strong&gt;Note&lt;/strong&gt; you will need to enter the VLAN ID.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bx cs init
bx cs cluster-create --name clustername --datacenter dal10 --public-vlan 12356 --private-vlan 67891 --workers 3 --machine-type u1c.16x64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setup-cabin&#34;&gt;Setup Cabin&lt;/h2&gt;

&lt;p&gt;The following instructions are quite hacky and we will be rolling out something more permanent and easier in the near future.&lt;/p&gt;

&lt;p&gt;First you will need to download the cluster config for your Kubernetes cluster.  You will need to wait until the cluster is provisioned.  To see if it&amp;rsquo;s been provisioned run &lt;code&gt;bx cs clusters&lt;/code&gt;.  Under &lt;code&gt;state&lt;/code&gt; it should show &lt;code&gt;deployed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, you will need to download the Kube config, to do that run what is below replacing &lt;code&gt;clustername&lt;/code&gt; with the name of your cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bx cs cluster-config clustername
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will download a file and print out something like &lt;code&gt;export KUBECONFIG=/Users/jsloyer/.bluemix/plugins/container-service/clusters/jefftest/kube-config-prod-dal10-jefftest.yml&lt;/code&gt;.  Run the command that it prints out, if you are on Windows it will be slightly different, it will start with &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, you will need the hostname of your cluster, to get that run the following replacing &lt;code&gt;clustername&lt;/code&gt; with the name of your cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bx cs cluster-get clustername
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will want to copy the &lt;code&gt;Master URL&lt;/code&gt;.  I have pasted mine below omitting my port and part of my IP.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bx cs cluster-get jefftest
Retrieving cluster jefftest...
OK
Name:		jefftest
ID:		xxxxxx
Created:	2017-03-28T22:54:50+0000
State:		deployed
Master URL:	https://169.47.xxx.xxx:xxxx
Ingress host:	-
Ingress secret:	-
Workers:	1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, you will need to get the token for your Kube cluster.  To do that run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get secrets | grep default-token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will output something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get secrets | grep default-token
default-token-gjswg      kubernetes.io/service-account-token   3         21h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following command replace xxxx with the couple of random characters from the command above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get secret default-token-xxxx -o yaml | grep token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is going to output a bunch of stuff, you are going to want to copy the value for &lt;code&gt;token&lt;/code&gt; for the next step.&lt;/p&gt;

&lt;p&gt;With the copied value for &lt;code&gt;token&lt;/code&gt; run the following, &lt;strong&gt;note&lt;/strong&gt; the following will only work on Mac or Linux&amp;hellip;  You will want to replace token with the really long value you copied.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo token | base64 --decode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything worked you have something outputted that starts with &lt;code&gt;ey&lt;/code&gt;.  It if outputs some garbled text you probably copied it wrong, in writing this I missed a letter on the beginning of mine so be careful.&lt;/p&gt;

&lt;p&gt;you can then use that in app for your token&lt;/p&gt;

&lt;p&gt;Open up the Cabin app on your phone, if you havent downloaded it you can download it from Google Play or the App Store by searching for &lt;code&gt;cabin kubernetes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open the app enter the &lt;code&gt;Master URL&lt;/code&gt; from a couple steps above in the URL field, make sure you have &lt;code&gt;https://&lt;/code&gt; and the port after the IP address.&lt;/p&gt;

&lt;p&gt;Under authentication tap &lt;code&gt;Token&lt;/code&gt;, paste in the value for the token from the previous step, remember it starts with &lt;code&gt;ey&lt;/code&gt;, for a configured cluster, see the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/cabin1-thumb.jpg&#34; alt=&#34;Cabin Setup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cabin is pretty cool, you can exec into containers and view logs and almost do anything with your Kube Cluster.  I would love to see the SkipppBox guys open source this&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/cabin2-thumb.jpg&#34; alt=&#34;Cabin Overview&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/cabin3-thumb.jpg&#34; alt=&#34;Cabin Pods&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats it, you are configured to connect to your Kubernetes cluster on the IBM Bluemix Containers Service.  Please leave any comments or feedback below.  If you are a Windows user I would love some comments on the steps to get this working :).&lt;/p&gt;

&lt;h2 id=&#34;known-issues&#34;&gt;Known Issues&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tiller seems busted which deploys apps into the cluster.  For more info check out &lt;a href=&#34;https://github.com/skippbox/cabin-issues/issues/24&#34;&gt;this GitHub issue&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Please reach out to us on Slack at &lt;a href=&#34;https://ibm-container-service.slack.com&#34;&gt;https://ibm-container-service.slack.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cross Compiling Golang with a Docker Alpine Container</title>
      <link>http://www.jeffsloyer.io/post/cross-compiling-docker-alpine-golang/</link>
      <pubDate>Mon, 19 Dec 2016 14:11:14 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/cross-compiling-docker-alpine-golang/</guid>
      <description>

&lt;p&gt;Recently at work I have been struggling with building a small/minimized Docker container of a Go app I have been working on.  I started with &lt;code&gt;busybox&lt;/code&gt; but it has a major short coming&amp;hellip;  CA certificates.  It isn&amp;rsquo;t trivial to get CA Certs on a &lt;code&gt;busybox&lt;/code&gt; container.  This problem effectively prevents you from using SSL or TLS with your app&amp;hellip;  This is a non-starter&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;enter-alpine&#34;&gt;Enter Alpine&lt;/h2&gt;

&lt;p&gt;I was doing some reading and I have seen a couple articles mention Alpine, its effectively a slimmed down version of &lt;code&gt;busybox&lt;/code&gt; but it makes it trivially easy to install packages, in my case CA Certificates!  At this point I was really excited but I ran into some issues trying to compile the binary.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The solution is actually pretty simple, you need to build your Go app inside of a container and then copy the built container to your &amp;ldquo;production&amp;rdquo; Alpine image.&lt;/p&gt;

&lt;p&gt;My solution uses the &lt;code&gt;Makefile&lt;/code&gt;, there is different ways of doing this but this is the simplest.&lt;/p&gt;

&lt;p&gt;The first addition to the &lt;code&gt;Makefile&lt;/code&gt; is the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY: buildgo
buildgo:
    CGO_ENABLED=0 GOOS=linux go build -ldflags &amp;quot;-s&amp;quot; -a -installsuffix cgo .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is intended to be run inside of a container but you can run it anywhere.  What it does is builds a binary that is statically linked with CGO disabled so it uses the statically linked cgo binary on in the container.  This is important as Alpine uses a custom lightweight subset of glibc called &lt;a href=&#34;http://www.musl-libc.org/&#34;&gt;&lt;code&gt;libc&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next stanza you need for your &lt;code&gt;Makefile&lt;/code&gt; actually builds two containers.  One is your build container based on the &lt;code&gt;golang&lt;/code&gt; image and then copies the binary to your &lt;code&gt;Alpine&lt;/code&gt; container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY: builddocker
builddocker:
    docker build -t yourorg/yourproject-build -f ./Dockerfile.build .
    docker run -t yourorg/yourproject-build /bin/true
    docker cp `docker ps -q -n=1`:/go/src/github.com/yourorg/yourproject/yourproject .
    chmod 755 ./yourproject
    docker build -t yourorg/yourproject .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make the above work you need two Docker files.  They are below&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the following is assuming your depencies are already downloaded, I do this with a make task, &lt;code&gt;make deps&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY: deps
deps:
    glide install

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is nice/elegant as you don&amp;rsquo;t have to run this in the container so if you have private repo&amp;rsquo;s you don&amp;rsquo;t need to copy in ssh keys or GitHub tokens to download source code.  Just make sure your don&amp;rsquo;t have a &lt;code&gt;.dockerignore&lt;/code&gt; file as things in that file won&amp;rsquo;t be copied over&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile.build&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang:1.7.1

WORKDIR /go/src/github.com/yourorg/yourproject/

ADD . /go/src/github.com/yourorg/yourproject/
RUN make buildgo
CMD [&amp;quot;/bin/bash&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine

COPY yourproject /go/bin/

RUN apk add --update --no-cache ca-certificates

ENV GOPATH /go

ENTRYPOINT [&amp;quot;/go/bin/yourproject&amp;quot;]

# Service listens on port 6969.
EXPOSE 6969
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above assumes your binary is named the same as your project name.&lt;/p&gt;

&lt;p&gt;The magic in &lt;code&gt;Dockerfile&lt;/code&gt; is the ability to install the CA certs with a single command.&lt;/p&gt;

&lt;h2 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;The only issue with disabling CGO is that some functionality in go requires it, most notably is from the &lt;code&gt;os/user&lt;/code&gt; package, the function &lt;code&gt;user.Current()&lt;/code&gt; makes use of it to determine a user&amp;rsquo;s home directory.  You might get an error like the following&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user: Current not implemented on linux/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Apache Mesos project ran into this, &lt;a href=&#34;https://github.com/mesosphere/mesos-dns/commit/4b99d6cc16c2be170525cd572f6564b673ac90d0&#34;&gt;you can see their solution&lt;/a&gt;.  Their solution does a shortcoming though with their looping&amp;hellip;  Check out &lt;a href=&#34;https://github.com/jsloyer/softlayer-go/blob/af445630c2c18a51aebd3f9b0158a162310699db/session/session.go#L141-L152&#34;&gt;my change&lt;/a&gt; in the Go library for IBM Softlayer.  The pull PR is available &lt;a href=&#34;https://github.com/softlayer/softlayer-go/pull/32&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please follow me on Twitter at &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt; and follow me on &lt;a href=&#34;https://www.youtube.com/channel/UCQb6E0NWy6kVglreLNigxng&#34;&gt;Youtube&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Chose Hugo over Wordpress - Part 2</title>
      <link>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress-part2/</link>
      <pubDate>Sun, 18 Dec 2016 14:11:14 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress-part2/</guid>
      <description>

&lt;p&gt;This post has been a long time going and much overdue, it has almost been 12 months
since publishing the follow up to my previous post &lt;a href=&#34;http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/&#34;&gt;Why I Chose Hugo Over Wordpress.&lt;/a&gt;  But I am finally going to take the time and explain all the technical parts about how I made this blog work with Hugo.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-site&#34;&gt;Setting up the site&lt;/h2&gt;

&lt;p&gt;First to get started you need to install Hugo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you need to create a basic Hugo site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site jsloyer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Hugo you you can use themes, I am using a modified version of &lt;a href=&#34;https://github.com/humboldtux/startbootstrap-clean-blog&#34;&gt;StartBootstrap Clean Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I embedded the theme into my &lt;a href=&#34;https://github.com/jsloyer/jsloyer/tree/master/themes/startbootstrap-clean-blog&#34;&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you embed the theme you need to tell Hugo to use the theme.&lt;/p&gt;

&lt;p&gt;You do this in &lt;a href=&#34;https://github.com/jsloyer/jsloyer/blob/master/config.toml#L6&#34;&gt;config.toml&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme = &amp;quot;startbootstrap-clean-blog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Speaking of git you need to setup a GitHub project, the name is really important&amp;hellip; If you are publishing the Hugo site under your own GitHub org, ie your username, the git project needs to match that.  For me my GitHub username is &lt;code&gt;jsloyer&lt;/code&gt; so my git project name is &lt;code&gt;jsloyer&lt;/code&gt; as well.  The reason for this is how GitHub pages works in picking up the build and publishing for a GitHub pages site.&lt;/p&gt;

&lt;p&gt;You will be doing all of your work on the &lt;code&gt;master&lt;/code&gt; branch.  Think of the &lt;code&gt;master&lt;/code&gt; branch as you would with any of piece of software, the &lt;code&gt;master&lt;/code&gt; branch is the raw code, in this case just markdown.  There is another special magic branch called &lt;code&gt;gh-pages&lt;/code&gt; that we will go through later that makes your repo into a GitHub pages site.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-post&#34;&gt;Creating a post&lt;/h3&gt;

&lt;p&gt;So next we need to create our first post!  To do this its pretty simple&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/good-to-great.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I start up Hugo to see how the site will look.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This starts Hugo in dev mode where you can see a post while you are working on it.  The beauty is you can even check the unfinished post into git but until you flip the magic &lt;code&gt;draft&lt;/code&gt; setting on a post it won&amp;rsquo;t be live on the Internet.&lt;/p&gt;

&lt;p&gt;As you make changes to your post and save it Hugo will automatically reload in the browser what the post will look like.&lt;/p&gt;

&lt;p&gt;Before we jump into how to take a post live lets look at some of the metadata in the post&amp;hellip;  Here is some metadata for a &lt;a href=&#34;http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/&#34;&gt;previous post of mine.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = [&amp;quot;Other&amp;quot;]
date = &amp;quot;2016-01-08T14:11:14-05:00&amp;quot;
description = &amp;quot;&amp;quot;
draft = false
image = &amp;quot;/original-images/migrate.jpg&amp;quot;
tags = [&amp;quot;wordpress&amp;quot;, &amp;quot;migrate&amp;quot;]
title = &amp;quot;Why I Chose Hugo over Wordpress&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can set some various pieces of information for a post.  For my paricular theme each post has a Jumbotron image, that is set via the &lt;code&gt;image&lt;/code&gt; attribute.  More on images later&amp;hellip;  You can also set tags as well as the title of the post.  The most interesting bit here is the &lt;code&gt;draft = false&lt;/code&gt; line.  This is what I was referring to above in controlling when a post gets published.  Once you feel like your post is ready just change it to &lt;code&gt;draft = true&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;publishing&#34;&gt;Publishing&lt;/h3&gt;

&lt;p&gt;The next step is publishing your post, once you set the &lt;code&gt;draft = true&lt;/code&gt; for a post you need to check this file into Git.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;my awesome post&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point you think you might be done but you aren&amp;rsquo;t you need to setup GitHub Pages and a pipeline&amp;hellip;&lt;/p&gt;

&lt;p&gt;I chose &lt;a href=&#34;http://wercker.com&#34;&gt;Wercker&lt;/a&gt; as my CI engine for this.  It was incredibly easy to setup a pipeline to build the site as well as deploy the site back to GitHub.&lt;/p&gt;

&lt;p&gt;Before we get into the pipeline we need to setup the git project as a GitHub pages site.&lt;/p&gt;

&lt;p&gt;Goto the settings page for your project, for me its &lt;code&gt;https://github.com/jsloyer/jsloyer/settings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Scroll down to the bottom&amp;hellip;&lt;/p&gt;

&lt;p&gt;Click &amp;ldquo;Launch automatic page generator&amp;rdquo;, see below.  Go through the wizard, it really doesn&amp;rsquo;t matter what you choose here, you are going to replace the content anyways&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/gh-pages-generation-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/gh-pages-generation-medium.jpg&#34; alt=&#34;automatic page generator&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have this setup it might take a little bit but your site will be available.  For example my site without the custom domain name is &lt;code&gt;http://jsloyer.github.io/jsloyer&lt;/code&gt;.  Replace your GitHub username with mine and you will be able to access the default site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  If you want to use a custom domain name I&amp;rsquo;ll include the instructions below, for example my site is hosted on &lt;code&gt;www.jeffsloyer.io&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;automatic-pipeline-publishing&#34;&gt;Automatic Pipeline/Publishing&lt;/h3&gt;

&lt;p&gt;The next step is to to get automatic publishing setup.  So what happens for me is when I check in a new commit to the master branch, Wercker builds my images and builds the site and publishes it back to the &lt;code&gt;gh-pages&lt;/code&gt; branch automatically.&lt;/p&gt;

&lt;p&gt;To do this you need a file called &lt;code&gt;werkcer.yml&lt;/code&gt; in your project.  Below is a copy of mine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;box: nodesource/node
build:
  steps:
    - install-packages:
        packages: graphicsmagick
    - npm-install
    - grunt:
        tasks: processimages
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
        theme: startbootstrap-clean-blog
deploy:
  steps:
    - install-packages:
        packages: git ssh-client
    - lukevivier/gh-pages@0.2.1:
        token: $GIT_TOKEN
        domain: www.jeffsloyer.io
        basedir: public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above yaml file will build my Hugo site for me as well as build my images in an optimized format as well.  The only bit you need to change is if you want to use a specific theme, if you don&amp;rsquo;t want to use the one that I am using change the following to the values you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme: startbootstrap-clean-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s take a bit and talk through my automatic image minimization and rendering.  During build time my images are compressed and minimized to different sizes.  I only check in high quality original images and the build process optimizes them for me.  To do that you need two files.  They are below.  I am not going to go through how it works but basically all you have to do is run &lt;code&gt;grunt processimages&lt;/code&gt; and the tasks will optimize your images&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;blog&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/jsloyer/jsloyer.git&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Jeff Sloyer&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;glob&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-cli&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-concat&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-connect&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-copy&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-jshint&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-sass&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-uglify&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-contrib-watch&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-jekyll&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;grunt-responsive-images&amp;quot;: &amp;quot;^0.1.7&amp;quot;,
    &amp;quot;grunt-shell&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;image-size&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;yamljs&amp;quot;: &amp;quot;*&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Gruntfile.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var grunt = require(&#39;grunt&#39;),
    fs = require(&#39;fs&#39;),
    glob = require(&#39;glob&#39;),
    sizeOf = require(&#39;image-size&#39;),
    YAML = require(&#39;yamljs&#39;);

grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-connect&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-copy&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-jshint&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-sass&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);
grunt.loadNpmTasks(&#39;grunt-responsive-images&#39;);
grunt.loadNpmTasks(&#39;grunt-jekyll&#39;);
grunt.loadNpmTasks(&#39;grunt-shell&#39;);

grunt.initConfig({

    responsive_images: {
        myTask: {
          options: {
            sizes: [{
              name: &#39;thumb&#39;,
              width: 400
            },{
              name: &#39;medium&#39;,
              width: 800
            },{
              name: &amp;quot;large&amp;quot;,
              width: 1200
            }]
          },
          files: [{
            expand: true,
            src: [&#39;**/*.{jpg,gif,png,jpeg}&#39;],
            cwd: &#39;static/original-images&#39;,
            dest: &#39;static/images&#39;
          }]
        }
    }
});

grunt.registerTask(&#39;resize&#39;, [&amp;quot;responsive_images&amp;quot;]);
grunt.registerTask(&#39;imageinfo&#39;, function(){
    var done = this.async();
    glob(&#39;static/images/**/*.{jpg,gif,png}&#39;, {}, function(err, files){
        var existingYml = fs.readFileSync(&amp;quot;static/images.yml&amp;quot;).toString();
        var a = existingYml.split(&amp;quot;#!#!#!#!#&amp;quot;);
        existingYml = a[0].trim();

        var data = {};
        files.forEach(function(file){
            var dimensions = sizeOf(file);
            var image = {
                width: dimensions.width,
                height: dimensions.height,
                aspect: dimensions.width / dimensions.height
            }
            data[file] = image;
        })

        var yamlString = YAML.stringify(data);
        var yamlHeading = &amp;quot;\n\n\n#!#!#!#!# Do not edit below this line.\n&amp;quot;;
        yamlHeading += &amp;quot;# Generated automatically using `grunt imageinfo`\n\n&amp;quot;;

        fs.writeFileSync(&amp;quot;static/images.yml&amp;quot;, existingYml + yamlHeading + yamlString);
        console.log(&#39;done&#39;);
        done();
    });

});
grunt.registerTask(&#39;processimages&#39;, [&#39;resize&#39;, &#39;imageinfo&#39;]);

grunt.registerTask(&#39;default&#39;, [&#39;processimages&#39;]);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check in the above files to GitHub, the files are the following.
- &lt;code&gt;wercker.yml&lt;/code&gt;
- &lt;code&gt;Gruntfile.js&lt;/code&gt;
- &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step is getting a token from GitHub.  To generate a token goto &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will want a token with the following permissions.  &lt;strong&gt;Note once you generate the token copy it because GitHub won&amp;rsquo;t display it to you again&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/GitHub-token-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/GitHub-token-medium.jpg&#34; alt=&#34;GitHub token&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we need to goto &lt;a href=&#34;https://wercker.com&#34;&gt;Wercker&lt;/a&gt; and login with our GitHub credentials.  Once you have logged in click &amp;ldquo;Create&amp;rdquo; at the top and choose application or just click &lt;a href=&#34;https://app.wercker.com/applications/create&#34;&gt;here&lt;/a&gt;.  You will need to choose your your repo and I chose to make my pipeline private, it is up to you.  Once you have finished that you need enter in yout Gitub token so Wercker and deploy your built Hugo site back to GitHub.&lt;/p&gt;

&lt;p&gt;Next we need to edit the pipeline to deploy to GitHub.  To do this click on the workflows tab.  For example my link is &lt;a href=&#34;https://app.wercker.com/jsloyer/jsloyer/workflows&#34;&gt;https://app.wercker.com/jsloyer/jsloyer/workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Under pipeline there should already be one called &lt;code&gt;build&lt;/code&gt;.  Click on &lt;code&gt;build&lt;/code&gt;.  Scroll down to &amp;ldquo;Ignore Branches&amp;rdquo;, type in &lt;code&gt;gh-pages&lt;/code&gt;.  We are ignoring the &lt;code&gt;gh-pages&lt;/code&gt; branch as we don&amp;rsquo;t ever want to build that, we just build master.  Click &amp;ldquo;Update&amp;rdquo;.  Go back in your browser.  We need to add another pipeline called &lt;code&gt;GitHubPages&lt;/code&gt;.  We need to set an environment variable called &lt;code&gt;GIT_TOKEN&lt;/code&gt;, paste in your GitHub token from earlier, click &amp;ldquo;Protected&amp;rdquo;.  Don&amp;rsquo;t worry Wercker won&amp;rsquo;t expose this to the public.  For the name enter in &lt;code&gt;GitHubPages&lt;/code&gt;.  For &amp;ldquo;YML Pipeline name&amp;rdquo; enter in &lt;code&gt;deploy&lt;/code&gt;.  Save this and you are now finished.&lt;/p&gt;

&lt;p&gt;To trigger a build check in a file into the master branch, the pipeline should execute and deploy your site back to GitHub Pages.  If it doesn&amp;rsquo;t post a comment below and I will help you through it.&lt;/p&gt;

&lt;h3 id=&#34;advanced-stuff&#34;&gt;Advanced Stuff&lt;/h3&gt;

&lt;p&gt;Below I am going to go through some advanced stuff that you probably want&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;custom-domain-name&#34;&gt;Custom Domain Name&lt;/h4&gt;

&lt;p&gt;For my site my site is available at &lt;code&gt;www.jeffsloyer.io&lt;/code&gt;.  To do this you need to have the domain name in your &lt;code&gt;config.toml&lt;/code&gt;, mine is &lt;a href=&#34;https://github.com/jsloyer/jsloyer/blob/master/config.toml#L1&#34;&gt;available here&lt;/a&gt;.  Additionally you need your domain name in your &lt;code&gt;wercker.yml&lt;/code&gt; as well, mine is posted above.&lt;/p&gt;

&lt;p&gt;Lastly you need a CNAME entry with your registrar to point to GitHub.  For more information go &lt;a href=&#34;https://help.github.com/articles/setting-up-a-www-subdomain/&#34;&gt;here&lt;/a&gt;.  The CNAME record should point to &lt;code&gt;your-username.GitHub.io&lt;/code&gt;.  For example my site &lt;code&gt;www.jeffsloyer.io&lt;/code&gt; has a CNAME record that points to &lt;code&gt;jsloyer.GitHub.io&lt;/code&gt;.  It migh take a bit for DNS to update, depends on how long of a TTL you have&amp;hellip;&lt;/p&gt;

&lt;p&gt;Follow the instructions &lt;a href=&#34;https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-GitHub-pages-site/&#34;&gt;here&lt;/a&gt; to add the domain name to the GitHub project as well.&lt;/p&gt;

&lt;h3 id=&#34;add-ons&#34;&gt;Add-ons&lt;/h3&gt;

&lt;p&gt;Hugo has a lot of addons, some are even built right in.  For example Google Analytics and Disqus.&lt;/p&gt;

&lt;p&gt;To Google Analytics I just had to add one line to &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ganalytics = &amp;quot;UA-xxxx-xxx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add Disqus integration I just had to also add one line to &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;xxxx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple&amp;hellip;  For a full list of add-ons goto &lt;code&gt;https://gohugo.io/extras&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also please follow me on Twitter at &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt; and follow me on &lt;a href=&#34;https://www.youtube.com/channel/UCQb6E0NWy6kVglreLNigxng&#34;&gt;Youtube&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speaking Engagements</title>
      <link>http://www.jeffsloyer.io/speaking/</link>
      <pubDate>Tue, 12 Jan 2016 10:09:20 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/speaking/</guid>
      <description>

&lt;h2 id=&#34;past-events&#34;&gt;Past Events&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nodesummit.com/media/mobile-web-apps-with-pouchdb-angularjs-node-js-and-ibm-cloudant-bradley-holt-jeff-sloyer/&#34;&gt;Node Summit 2015&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;February 10, 2015&lt;/li&gt;
&lt;li&gt;San Francisco, CA, USA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/4QXZl4cFw24?t=2h1m55s&#34;&gt;Twilio Signal 2015 - Keynote&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;May 18, 2015&lt;/li&gt;
&lt;li&gt;San Francisco, CA, USA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xkB0qiU6PGk&#34;&gt;Kranky Geek 2015&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;September 11, 2015&lt;/li&gt;
&lt;li&gt;San Francisco, CA, USA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Why I Chose Hugo over Wordpress</title>
      <link>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/</link>
      <pubDate>Fri, 08 Jan 2016 14:11:14 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/</guid>
      <description>

&lt;p&gt;I am finally back with my blog, sorry it has been quite awhile.  I just recently finished a migration of my blog my running on Wordpress, which was hosted on &lt;a href=&#34;http://wpengine.com&#34;&gt;WPEngine&lt;/a&gt; and is a really awesome service, to Github pages.  I got tired of using Wordpress and WPEngine cost me about $30/month&amp;hellip;  So I decided to migrate the site to Github pages where I can run the site for free.&lt;/p&gt;

&lt;h2 id=&#34;wordpress-vs-jekyll&#34;&gt;Wordpress vs. Jekyll&lt;/h2&gt;

&lt;p&gt;So let&amp;rsquo;s back up a bit and talk about why I first went with Wordpress.  It mostly came down to speed of getting my site up.  I took the easy way out, I didn&amp;rsquo;t want have to deal with managing a VM and maintaing Wordpress so spent a decent amount of time reading about different hosting providers for Wordpress.  WPEngine consistently rose to the top mainly for its use of use and speed.  At this point I was also dabbling with Github pages but was using Jekyll and didn&amp;rsquo;t have much luck with it.  When I was looking at using Jekyll it was being re-written, there was a version with a bunch of Ruby Gems and then a new version.  The Ruby Gems version had way more plugins and flexibility but the new version was much simplier to get up and running.  I honestly gave it a good try, I spent a couple hours trying to get things working and I couldn&amp;rsquo;t.  I am someone who usually never gives up on something, by gosh I&amp;rsquo;ll get that squre to fit into a circle&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/circle-into-square-thumb.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/circle-into-square-thumb.png&#34; alt=&#34;square into a cirlc&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this time, I had to throw up the white flag&amp;hellip;  I just couldn&amp;rsquo;t deal with Jekyll anymore, this is when I decided to jump in feet first with WPEngine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/white-flag-thumb.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/white-flag-thumb.jpg&#34; alt=&#34;white flag&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;life-with-wpengine&#34;&gt;Life with WPEngine&lt;/h2&gt;

&lt;p&gt;Life was good with WPEngine.  It was really easy to crank out a bunch of blog posts, I mean Wordpress has a great &lt;a href=&#34;https://en.wikipedia.org/wiki/WYSIWYG&#34;&gt;WYSIWYG editor&lt;/a&gt;.  I eventually got my site up and running an launched the site!&lt;/p&gt;

&lt;p&gt;I then realized I needed to optimize the site for speed and SEO.  My first task was enabling SSL.  This was incredibly easy with WPEngine, just pay them $53 bucks for a year and you get an SSL cert, that was easy&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/easy-thumb.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/easy-thumb.jpg&#34; alt=&#34;easy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My next order of business was increasing the speed of Wordpress, WPEngine already does a lot and their infrastructure is top notch but Wordpress needs some help to speed itself up.  I followed some stepson speeding up Wordpress, most of it involved caching, minifying, and uglfying assets.&lt;/p&gt;

&lt;p&gt;Life was pretty good at this point but as the site continued to grow it became slower and slower&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;time-for-a-change&#34;&gt;Time for a change&lt;/h2&gt;

&lt;p&gt;I was talking to a &lt;a href=&#34;https://twitter.com/raymondcamden&#34;&gt;colleague from work, Raymond Camden&lt;/a&gt; about our blogs and he mentioned I should check out Hugo.  Basically I kind of stopped blogging because WPEngine was too easy, plus I needed a Holiday project as well over Christmas.  I started looking into Hugo and could of not been more happy!!!&lt;/p&gt;

&lt;p&gt;Basically Hugo is a static site generator liked Jekyll but way more simplier.  Plus Hugo is written in Go and I have been recently learning Go so I was sold!&lt;/p&gt;

&lt;h2 id=&#34;hugo-vs-wordpress&#34;&gt;Hugo vs. Wordpress&lt;/h2&gt;

&lt;p&gt;So honestly you really can not beat the speed of a static site.  Wordpress no matter what has to query a database for every request and that adds up.  I decided to run my Hugo generated blog on Github Pages for even more speed.  Github fronts themselves with &lt;a href=&#34;http://fastly.com&#34;&gt;Fastly&lt;/a&gt;, which is probably the coolest and most pimp CDN out there.  Its super fast, like no one can beat them on time to first byte.  Fastly uses SSD&amp;rsquo;s in the cache machines so delivering content is blazing fast.  Additionally Fastly has an API to configure your site and basically allows you to do everything programatically, plus they have self on-boarding, a big plus that you don&amp;rsquo;t have to call some sales person&amp;hellip;&lt;/p&gt;

&lt;p&gt;I have been using markdown a bit more recently and I felt like this time I was more prepared to jump into markdown.  My Hugo site uses marketdown for the content files then HTML for the theme.  Its really nice that you can keep your content stored in markdown and its agnostic of the presentation layer (the theme).  If you don&amp;rsquo;t want to use markdown thats ok, you can create your content in HTML as well.&lt;/p&gt;

&lt;p&gt;Additionally, with Hugo I am storing my site on &lt;a href=&#34;http://github.com/jsloyer/jsloyer&#34;&gt;Github&lt;/a&gt; and I check in source content and source files such as images.  My build process uses &lt;a href=&#34;http://wercker.com&#34;&gt;Wercker&lt;/a&gt; to build my static site and to generate the correctly sized images for my blog as well.  Plus Wercker auto-deploys my site to Github Pages whenever there is a checkin!&lt;/p&gt;

&lt;h2 id=&#34;migrating-the-site&#34;&gt;Migrating the site&lt;/h2&gt;

&lt;p&gt;In my &lt;a href=&#34;http://www.jeffsloyer.io/post/why-i-chose-hugo-over-wordpress/&#34;&gt;next post&lt;/a&gt; I will go through how I migrated my site from Wordpress to Hugo.  Hope this has been informative and hopefully interesting.  Please leave some comments below!&lt;/p&gt;

&lt;p&gt;Also please follow me on Twitter at &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt; and follow me on &lt;a href=&#34;https://www.youtube.com/channel/UCQb6E0NWy6kVglreLNigxng&#34;&gt;Youtube&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://www.jeffsloyer.io/about/</link>
      <pubDate>Mon, 04 Jan 2016 13:14:32 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/about/</guid>
      <description>&lt;p&gt;Jeff Sloyer is a Developer Advocate at IBM, promoting IBM’s Platform as a Service (Paas), Bluemix. He’s a Node.JS developer most days, but tinkers in Java and Python. Sloyer is a hacker at heart who loves playing with new tech and cobbling together new demos and projects. He’s an avid traveler, flying around the world and speaking about Bluemix at conferences and events.&lt;/p&gt;

&lt;p&gt;On a more personal note Jeff Sloyer loves really anything outside.  Some of his favorite activities include mountain biking, skiing, wake boarding, and hiking.&lt;/p&gt;

&lt;p&gt;Jeff is also a home brewer, just a word of caution here, he is still learning…  The last beer was a little bit of a mistake and fermented too long.  The beer was supposed to be 7% and turned into 14%.  Ooopies…&lt;/p&gt;

&lt;p&gt;Additionally, Jeff is a foodie.  He loves traveling and eating new food and experiencing different cultures.  Additionally, the travel bug has bitten Jeff hard.  He loves to travel to new places and spends a decent amount of time on airplanes.  He even loves traveling so much he enjoys going through security.  Weird I know right???  One day he hopes to get his own G5.&lt;/p&gt;

&lt;p&gt;Lastly, Jeff is a big believer in the 2nd amendment and is a marksman.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter: &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;jsloyer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;http://github.com/jsloyer&#34;&gt;jsloyer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackOverflow: &lt;a href=&#34;http://stackoverflow.com/users/3817025/jeff-sloyer&#34;&gt;jeff-sloyer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube: &lt;a href=&#34;http://youtube.com/c/JeffSloyer&#34;&gt;JeffSloyer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DZone: &lt;a href=&#34;https://dzone.com/users/jsloyer&#34;&gt;DZone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fixing common errors with the PHP Buildpack in Bluemix</title>
      <link>http://www.jeffsloyer.io/post/fixing-common-errors-with-the-php-buildpack-in-bluemix/</link>
      <pubDate>Wed, 26 Aug 2015 11:17:31 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/fixing-common-errors-with-the-php-buildpack-in-bluemix/</guid>
      <description>&lt;p&gt;Following up from my &lt;a href=&#34;http://www.jeffsloyer.io/post/cloud-foundry-php-buildpack-doesnt-support-lucid64/&#34;&gt;previous post&lt;/a&gt;, Canonical recently dropped support for &lt;code&gt;lucid64&lt;/code&gt; which is Ubuntu 10.04 LTS. This affects Cloud Foundry as &lt;code&gt;lucid64&lt;/code&gt; is the basis for most buildpacks. In Cloud Foundry &lt;code&gt;lucid64&lt;/code&gt; is being phased out for Ubuntu 14.04 LTS which is known as &lt;code&gt;cflinuxfs2&lt;/code&gt; in Cloud Foundry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Getting stacks in org jbsloyer@us.ibm.com / space dev as jbsloyer@us.ibm.com...
OK

name         description
lucid64      Ubuntu 10.04
cflinuxfs2   Ubuntu 14.04.2 trusty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The PHP buildpack will take the default system buildpack and right now in Bluemix it is &lt;code&gt;lucid64&lt;/code&gt;. This will throw some errors when you try to push your PHP app, for example something like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;It looks like you&#39;re deploying on a stack (currently set to *lucid64*) that&#39;s not supported by this buildpack.
That could be because you&#39;re using a recent buildpack release on a deprecated stack.
If you&#39;re using the buildpack installed by your CF admin, please let your admin know you saw this error message.
If you at one point specified a buildpack that&#39;s at git URL, please make sure you&#39;re pointed at a version that supports this stack.
Staging failed: Buildpack compilation step failed

FAILED
BuildpackCompileFailed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix it you just need to use the &lt;code&gt;-s cflinuxfs2&lt;/code&gt; argument for the &lt;code&gt;cf push&lt;/code&gt; command.
Ex.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push myapp -b https://github.com/cloudfoundry/php-buildpack.git -s cflinuxfs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out this video for a walk through on how to fix the issue and an explanation of it.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/anJ1JUE1tgE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Peering Inside a Criminal’s Mind using IBM Watson</title>
      <link>http://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/</link>
      <pubDate>Mon, 24 Aug 2015 11:21:03 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/</guid>
      <description>&lt;p&gt;With the recent shooting in South Carolina in reminds us that criminal&amp;rsquo;s can and will continue to harm people.  They seem like random acts to most of us but to a criminal the acts make sense to them?  No one can answer this question except the criminal.  To peer inside a criminal&amp;rsquo;s would be next to impossible but what if there existed another way to peer inside their mind&amp;rsquo;s?  This could be used to try to identify patterns or personality traits that exist.  This information could be used to prevent these horrible acts and better humanity.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;So how would we do this?  I work at IBM so the answer is obviously IBM Watson.  We all have heard of Watson, IBM Watson &lt;a href=&#34;http://blog.ted.com/how-did-supercomputer-watson-beat-jeopardy-champion-ken-jennings-experts-discuss/&#34;&gt;beat Ken Jennings on Jeopardy&lt;/a&gt;.  However there is so much more that Watson can do, &lt;a href=&#34;https://console.ng.bluemix.net/catalog?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;check this out&lt;/a&gt; for all the cool things Watson can do.  One of the really cool services that Watson now provides is something called Personality Insights.  This service can analyze the personality of text in meer seconds via a REST API.  One of the things IBM is trying to do now is make all these really cool technologies available to everyone and anyone.  They are doing it through something called &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;IBM Bluemix&lt;/a&gt;.  &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; is IBM&amp;rsquo;s platform as a service (PaaS), and it has a whole giant catalog of really cool technologies from IBM as well as lots of other third parties.  You can sign up for a free 30 day account by going &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So how does this fit back with peering inside of a criminal.  Well I hope you guessed the answer, we are going to use Personality Insights to analyze the personality of a couple criminal&amp;rsquo;s and look for some common traits.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take the most recent horrible attack, the South Carolina church shooting.  Dylann Roof posted a manifesto online and we are going to use that as the basis to peer into his mind.&lt;/p&gt;

&lt;p&gt;There are two ways to try this out for yourself.  Let&amp;rsquo;s go through both of them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sign up a &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix account&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the button deploy.  The button will automagically deploy the Personality Insights starter app that we are going to use.  If you are interested in the code head over to &lt;a href=&#34;https://github.com/IBM-Bluemix/personality-insights-nodejs&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bluemix.net/deploy?repository=https://github.com/IBM-Bluemix/personality-insights-nodejs.git&amp;amp;cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/03/button-medium.png&#34; alt=&#34;Deploy to Bluemix&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you app is finished deploying click &amp;ldquo;View your app&amp;rdquo;.  You will be taken to your app.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hint, if you are lazy and don&amp;rsquo;t want to do the above steps go &lt;a href=&#34;http://watson-um-demo.mybluemix.net&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to get the text from Dylann Roof that we want to analyze.  It can be found &lt;a href=&#34;http://lastrhodesian.com/data/documents/rtf88.txt&#34;&gt;here&lt;/a&gt;.  Open the link and copy all the text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &amp;ldquo;Clear&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/clear-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/07/clear-medium.jpg&#34; alt=&#34;clear&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Paste the text into the text box&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/enter-text-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/07/enter-text-medium.jpg&#34; alt=&#34;enter-text&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &amp;ldquo;Analyze&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/analyze-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/07/analyze-medium.jpg&#34; alt=&#34;analyze&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Watson will return us Dylann Roof&amp;rsquo;s personality based on the manifesto in just a matter of seconds.&lt;/p&gt;

&lt;blockquote&gt;You are unconventional, shrewd and can be perceived as critical.

You are unconcerned with art: you are less concerned with artistic or creative activities than most people who participated in our surveys. You are laid-back: you appreciate a relaxed pace in life. And you are intermittent: you have a hard time sticking with difficult tasks for a long period of time.

More than most people, your choices are driven by a desire for well-being.

You consider helping others to guide a large part of what you do: you think it is important to take care of the people around you. You are relatively unconcerned with tradition: you care more about making your own path than following what others have done.&lt;cite&gt; -- IBM Watson Analysis of Dylann Roof&#39;s manifesto&lt;/cite&gt;&lt;/blockquote&gt;

&lt;p&gt;Additionally Watson provides us a visualization as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/personality-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/07/personality-medium.jpg&#34; alt=&#34;personality&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s next take a look at Anders Behring Breivik, who was responsible for the 2011 attacks in Norway.  His manifesto is available &lt;a href=&#34;https://info.publicintelligence.net/AndersBehringBreivikManifesto.pdf&#34;&gt;here&lt;/a&gt;.  You will need to convert it to a &lt;code&gt;.txt&lt;/code&gt; file. You can do this &lt;a href=&#34;http://www.zamzar.com/convert/pdf-to-txt/&#34;&gt;here&lt;/a&gt;. It will email you a copy of the manifesto in a &lt;code&gt;.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/pdf-to-txt-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/07/pdf-to-txt-medium.jpg&#34; alt=&#34;pdf-to-txt&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s repeat the same steps as above.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clear the text area&lt;/li&gt;
&lt;li&gt;Paste the text&lt;/li&gt;
&lt;li&gt;Click Analyze&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You will need to make sure you have deployed the Bluemix app yourself for this one, the text file is really big and the default app does not support really large files.&lt;/p&gt;

&lt;blockquote&gt;You are shrewd, skeptical and tranquil.

You are philosophical: you are open to and intrigued by new ideas and love to explore them. You are imaginative: you have a wild imagination. And you are independent: you have a strong desire to have time to yourself.

You are motivated to seek out experiences that provide a strong feeling of prestige.

You are relatively unconcerned with both taking pleasure in life and tradition. You prefer activities with a purpose greater than just personal enjoyment. And you care more about making your own path than following what others have done.  &lt;cite&gt; -- IBM Watson Analysis of Anders Behring Breivik&#39;s manifesto&lt;/cite&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/personality-norway-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/07/personality-norway-medium.jpg&#34; alt=&#34;personality-norway&#34; /&gt;&lt;/a&gt;One last example.  I went to Virginia Tech and I was at the school when the &lt;a href=&#34;http://www.cnn.com/2013/10/31/us/virginia-tech-shootings-fast-facts/&#34;&gt;massacre happened there&lt;/a&gt;.  This one hits quite close to home to me.  I was supposed to be in a classroom that fellow students were massacred but I overslept.  Let&amp;rsquo;s take a look at Seung Hui Cho’s &amp;ldquo;Manifesto&amp;rdquo;.  His manifesto is available &lt;a href=&#34;https://schoolshooters.info/sites/default/files/cho_manifesto_1.1.pdf&#34;&gt;here&lt;/a&gt;.  You will need to convert it to a &lt;code&gt;.txt&lt;/code&gt; file. You can do this &lt;a href=&#34;http://www.zamzar.com/convert/pdf-to-txt/&#34;&gt;here&lt;/a&gt;. It will email you a copy of the manifesto in a &lt;code&gt;.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/pdf-to-txt-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images//2015/07/pdf-to-txt-medium.jpg&#34; alt=&#34;pdf-to-txt&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s repeat the same steps as above.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clear the text area&lt;/li&gt;
&lt;li&gt;Paste the text&lt;/li&gt;
&lt;li&gt;Click Analyze&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;You are boisterous and somewhat shortsighted.

You are content: you are content with your level of accomplishment and do not feel the need to set ambitious goals. You are confident: you are hard to embarrass and are self-confident most of the time. And you are carefree: you do what you want, disregarding rules and obligations.

More than most people, your choices are driven by a desire for modernity.

You consider independence to guide a large part of what you do: you like to set your own goals to decide how to best achieve them. You are relatively unconcerned with tradition: you care more about making your own path than following what others have done. &lt;cite&gt; -- IBM Watson Analysis of Seung Hui Cho&#39;s manifesto&lt;/cite&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/personality-virginia-tech-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/personality-virginia-tech-medium.jpg&#34; alt=&#34;personality-virginia-tech&#34; /&gt;&lt;/a&gt;Let&amp;rsquo;s do some analysis on all this data now.  It looks like all the shooter&amp;rsquo;s from these massacres have the following in common.&lt;/p&gt;

&lt;p&gt;It looks like from the Charleston and Norway events both share the following traits and a high percentage of both of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authority-challenging&lt;/li&gt;
&lt;li&gt;Self-transcendence&lt;/li&gt;
&lt;li&gt;Openness to change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also on the flip side they both share the following traits with low percentages, which if you think about it means probably huge red flags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conversation (Charleston was 3%, Norway was 11%)&lt;/li&gt;
&lt;li&gt;Cheerfulness (Charleston 12%, Norway 2%)&lt;/li&gt;
&lt;li&gt;Trust (Charleston 11%, Norway 8%)&lt;/li&gt;
&lt;li&gt;Uncompromising (Charleston 9%, 3%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So digging into it a little more by no means am I a psychologist but it seems to me that a person that has low values in conversation, cheerfulness, trust, and uncompromising could definitely be red flags.  Additionally, high values in authority-challenging, self-transcendence, openness to change paired with the above low characteristics could be a model to try to detect some of these behaviors and thoughts earlier on.&lt;/p&gt;

&lt;p&gt;Going forward if police or schools could analyze the text of suspected criminal&amp;rsquo;s before hand maybe these horrible massacre&amp;rsquo;s could of been prevented.  Maybe for the Dylann Roof case if the FBI examiner that reviewed Dylann Roof&amp;rsquo;s gun permit had access to a tool like this it could of prevented the whole situation.  I know that is kinda big brother but I really believe in a somewhat of an invasion of privacy for the overall good of humanity.&lt;/p&gt;

&lt;p&gt;This demo could easily be extended to use more automated methods as well.  Think of companies like Dropbox analyzing files or your ISP analyzing files.  I know this would be quite creepy but it could honestly possibly save lives and prevent these horrible massacres.&lt;/p&gt;

&lt;p&gt;I know this post is kind of controversial but it is good to be talking about this and hopefully some good will come from this.  Please leave me feedback below or tweet me &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(Video) - Deploying your Meteor app to Cloud Foundry and Bluemix</title>
      <link>http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</link>
      <pubDate>Mon, 24 Aug 2015 11:03:35 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</guid>
      <description>&lt;p&gt;This is a follow up post to a previous post on &lt;a href=&#34;http://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/&#34;&gt;Deploying your Meteor app to Cloud Foundry and Bluemix.&lt;/a&gt;  In this post we went through how to deploy a Meteor app to Cloud Foundry and Bluemix.  In this post we will be going through the same thing except in a video format.  Check out the video below.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/dyVmB8vHFaE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying your Meteor app to Cloud Foundry and Bluemix</title>
      <link>http://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</link>
      <pubDate>Wed, 05 Aug 2015 11:03:35 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/meteor-logo-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/meteor-logo-medium.png&#34; alt=&#34;meteor-logo&#34; /&gt;&lt;/a&gt;Meteor is a pretty powerful and cool framework for developing modern webapps all in Javascript.  It provides some really cool things as a modern UI, responsive code that works on a desktop and a mobile device, and some really slick features with websockets with client and server side rendering.&lt;/p&gt;

&lt;p&gt;I heard about Meteor mid-2014 but it peaked my interest last week when I was at a customer and a developer at the customer was building a Meteor app and they were asking how to run it on Bluemix.  Of course doing my job I helped the developer get the app running but it took a couple tweaks to the Cloud Foundry buildpack for Meteor.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;You might be asking what a buildpack is, that&amp;rsquo;s totally fine.  In Cloud Foundry you can use basically any language you want for your app, all you need is some code to laydown the app server or middleware and compile your code together and install dependencies.  For Meteor there is a buildpack available but it was slighly out of date.&lt;/p&gt;

&lt;p&gt;Last week and this week I committed some changes to the buildpack to make it more robust and compatible for newer Meteor apps.&lt;/p&gt;

&lt;p&gt;The buildpack now will allow you to use your existing Meteor app and push it to Cloud Foundry and Bluemix.&lt;/p&gt;

&lt;p&gt;For the rest of this blog post I am going to walk through on how to build an example Meteor app and push it to Bluemix.&lt;/p&gt;

&lt;h2 id=&#34;pre-req-s&#34;&gt;Pre-req&amp;rsquo;s&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sign up for a &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-MeteorSample-_-Node-MongoLab-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; account.  Go &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-MeteorSample-_-Node-MongoLab-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; and click on Sign-up in the top right hand corner.&lt;/li&gt;
&lt;li&gt;Meteor installed locally, go &lt;a href=&#34;https://www.meteor.com/install&#34;&gt;Meteor install&lt;/a&gt; to install Meteor&lt;/li&gt;
&lt;li&gt;Cloud Foundry Command Line (CLI) installed, go &lt;a href=&#34;https://www.ng.bluemix.net/docs/#starters/install_cli.html&#34;&gt;install CLI&lt;/a&gt; for instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a sample Meteor app, we are going to use the leaderboard example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor create --example leaderboard
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the sample app to Bluemix. &lt;strong&gt;Note&lt;/strong&gt;, this command will not start the app, we will need to choose our database next. Also replace leaderboard with a unique name for your app, for example leaderboard-jbs (my intials).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push leaderboard -b https://github.com/cloudfoundry-community/cf-meteor-buildpack.git --no-start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to choose if we want to use the built on Mongo DB with Cloud Foundry or an external third party MongoLab. It honestly doesn&amp;rsquo;t matter too much but MongoLab is built for scale is more reliable, I would choose MongoLab myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Built in MongoDB:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create the database.
    cf create-service mongodb 100 leaderboard-mongodb&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect the database to our app. Replace leaderboard with the name of your app (ex. leaderboard-jbs).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf bind-service leaderboard leaderboard-mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would then become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf bind-service leaderboard-jbs leaderboard-mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;MongoLab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create the database.
    cf create-service mongolab sandbox leaderboard-mongolab&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect the database to our app. Replace leaderboard with the name of your app (ex. leaderboard-jbs).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf bind-service leaderboard leaderboard-mongolab
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;would then become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cf bind-service leaderboard-jbs leaderboard-mongolab
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the application. Replace leaderboard with the name of your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf start leaderboard
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open up two web browsers and goto the same url, for me my URL would be &lt;a href=&#34;http://leaderboard-jbs.mybluemix.net&#34;&gt;http://leaderboard-jbs.mybluemix.net&lt;/a&gt;.  I got this url by putting the name of my app in front of mybluemix.net.&lt;/p&gt;

&lt;p&gt;In the video below you can see when you choose a player and then click add 5 points the other browser is updated instantly.  The example app is saving this information in the Mongo database then using websockets to notify all the connected clients of the change.  This is one of the really powerful features of Meteor.&lt;/p&gt;

&lt;p&gt;The work with the developer at the client last week has renewed my interest in Meteor and will have to dig into it more.&lt;/p&gt;

&lt;p&gt;If you prefer to watch a video of this as well, check out Video – &lt;a href=&#34;http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/&#34;&gt;Deploying your Meteor app to Cloud Foundry and Bluemix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;.  There will also be a video forth coming as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Common Deploy Errors with Community Buildpacks in Bluemix</title>
      <link>http://www.jeffsloyer.io/post/cloud-foundry-php-buildpack-doesnt-support-lucid64/</link>
      <pubDate>Wed, 29 Jul 2015 10:58:25 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/cloud-foundry-php-buildpack-doesnt-support-lucid64/</guid>
      <description>&lt;p&gt;Recently the company that owns development for Ubuntu (Canonical) just announced it is dropping support for lucid 64 which is Ubuntu 10.04 LTS.  What does this mean for Cloud Foundry and the community buildpacks?&lt;/p&gt;

&lt;p&gt;Well nothing really but there is a couple gotcha&amp;rsquo;s you should know about.&lt;/p&gt;

&lt;p&gt;I have seen issues with the following buildpacks, this is not a comprehensive list but the ones I at least know about.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PHP - &lt;a href=&#34;https://github.com/cloudfoundry/php-buildpack.git&#34;&gt;https://github.com/cloudfoundry/php-buildpack.git&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Static Build Pack - &lt;a href=&#34;https://github.com/cloudfoundry/staticfile-buildpack.git&#34;&gt;https://github.com/cloudfoundry/staticfile-buildpack.git&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These issues are documented in a couple StackOverflow posts but we are going to go through what is causing it and how to fix it.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/31057357/static-buildpack-deploy-now-failing-due-to-unsupported-stack/31058075#31058075&#34;&gt;Static Buildpack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/31057357/static-buildpack-deploy-now-failing-due-to-unsupported-stack/31062482#31062482&#34;&gt;Static Buildpack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are pushing an app to Cloud Foundry and getting an error message like the following there is a workaround you need to do to get the community buildpack&amp;rsquo;s to work.&lt;/p&gt;

&lt;p&gt;For example I have a super simple PHP app on Github I use for debugging, it is located here. For this blog post we are going to use that app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/jsloyer/phpinfo.git
cd phpinfo
cf push phpinfo-jbs2 -b https://github.com/cloudfoundry/php-buildpack.git
.....
It looks like you&#39;re deploying on a stack (currently set to *lucid64*) that&#39;s not supported by this buildpack.
That could be because you&#39;re using a recent buildpack release on a deprecated stack.
If you&#39;re using the buildpack installed by your CF admin, please let your admin know you saw this error message.
If you at one point specified a buildpack that&#39;s at git URL, please make sure you&#39;re pointed at a version that supports this stack.
Staging failed: Buildpack compilation step failed

FAILED
BuildpackCompileFailed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this is saying is the instance of Cloud Foundry that you are running on the default stack you get is an old version of Ubuntu. The PHP buildpack excepts the newer version of linux. This stack is called &lt;code&gt;cflinuxfs2&lt;/code&gt; also known as &lt;code&gt;Ubuntu 14.04&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To work around this you just need to specify the stack you want to use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push phpinfo-jbs2 -b https://github.com/cloudfoundry/php-buildpack.git -s cflinuxfs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information can be found on this issue on &lt;a href=&#34;https://github.com/cloudfoundry/php-buildpack/issues/87&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero downtime deployments with Bluemix and Codeship</title>
      <link>http://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix-and-codeship/</link>
      <pubDate>Mon, 20 Jul 2015 10:54:13 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix-and-codeship/</guid>
      <description>

&lt;p&gt;This is a part two post following up on my earlier post on &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/&#34;&gt;Zero Downtime Deployment with the CF Autopilot Plugin&lt;/a&gt;.  I highly encourage you to read the first part before reading this post but if you are lazy I will go over the high level concepts here.&lt;/p&gt;

&lt;h2 id=&#34;overview-of-part-1-quick-refresher&#34;&gt;Overview of Part 1 (Quick Refresher)&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/&#34;&gt;part 1&lt;/a&gt; we went over what a zero downtime deployment is and why it is in important. Let&amp;rsquo;s briefly cover that again.&lt;/p&gt;

&lt;p&gt;Zero Down time deployments are basically what they sound like.  You update production without taking downtime.  It’s not always that simple though.  For the context of this post we are going to be talking about how to do zero down time deployments in Cloud Foundry.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Basically it’s a little trick to taking advantage of the way Cloud Foundry runs underneath the covers.  Before we jump into it, there are a couple of caveats that we should discuss first.  To successfully take advantage of zero down time deployments you should have followed the &lt;a href=&#34;http://12factor.net/&#34;&gt;12 Factor App guidelines&lt;/a&gt;. This will ensure that your app is horizontally scalable and can be deployed in a manner that will result in zero down time.  Below are some highlights that you should abide by.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do not store sessions on disk or in memory.  Store them in some type of shared database or file system.  This could be your favorite database or an in memory database as well.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not store configuration information in your application or on disk.  You should store your config info for your app in environment variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is probably the most important, your application needs to be forward and backwards compatible with your database schema…  Say what?  Yes, you need to trust your developers to manage the database schema from your code.If you are using a relational database, you will need some kind of framework to do database migrations for you.  It’s not just that simple with relational databases though…  If you have a big database migration DO NOT PERORM MIGRATIONS THAT WILL INTERRUPT TRAFFIC!  Perform them slowly over time where migrations do not impact users and traffic.  Yahoo had a major application upgrade and it took them 6 months to do the migration to avoid impacting users and taking an outage.  Remember we do not take outages…  If you are in NoSQL land, your life is easier.  Just revision your API’s and educate your developers on forward and backwards data compatibility.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;importance-of-zero-down-time-deployments&#34;&gt;Importance of Zero Down Time Deployments&lt;/h2&gt;

&lt;p&gt;So why are zero down time deployments so important? The answer is simple, to keep your website/app up so you can make money! Well that might be over-simplified a bit, but basically it all boils down to keeping your app up so you can continue to do what you do best, and hopefully that involves making money. If you look at Facebook, for example, they put code into production weeks and months before a feature is exposed to the public. They extensively test the features on employees first, then slowly enable the features to the rest of the world. This is key, getting features in front of your customers and getting feedback from them. If it works that’s great, but if it doesn’t at least you know in a short time frame so you can remove it and pivot to go in a different direction. The current landscape is so fast paced that if you don’t get a feature out, your competition could beat you.&lt;/p&gt;

&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;So let’s walk through what needs to happen to perform zero downtime deployments in Cloud Foundry.  For the use of the walk-through, the application is currently taking traffic on &lt;code&gt;myapp.mybluemix.net&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Deploy your app or use a currently running app.
Currently your application is taking traffic on &lt;code&gt;myapp.mybluemix.net&lt;/code&gt;.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.001-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.001-medium.png&#34; alt=&#34;zero downtime graphics.001 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the new version of your app to &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt;.
At this time there is currently two versions of your app running.  &lt;code&gt;myapp.mybluemix.net&lt;/code&gt; is still taking production traffic.
The new app &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt; is separate, it can be pointed to your production API keys and databases at this point.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.002-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.002-medium.png&#34; alt=&#34;zero downtime graphics.002 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perform smoke tests on the new version of the application.
Some people say this step is optional, but to me its not.  This is key to make sure there wasn’t any weird regressions or merge issues, they CAN happen…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Map production traffic to the new version of your app.
At this point the old version of your app and the new version are both taking production traffic.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.003-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.003-medium.png&#34; alt=&#34;zero downtime graphics.003 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unmap production traffic from the old version of the app.  You can optionally delete the old version as well.
At this point the new version becomes production and ONLY it is taking traffic.
The new version still has two URL’s though, &lt;code&gt;myapp.mybluemix.net&lt;/code&gt; and &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt;.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.004-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.004-medium.png&#34; alt=&#34;zero downtime graphics.004 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove the temporary route &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt; from the new version of your app.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.005-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.005-medium.png&#34; alt=&#34;zero downtime graphics.005 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While this can be scripted there really isn’t a need to do that, there is a Cloud Foundry CLI plugin to do this.&lt;/p&gt;

&lt;h2 id=&#34;autopilot-plugin&#34;&gt;Autopilot plugin&lt;/h2&gt;

&lt;p&gt;Recently the Cloud Foundry CLI started supporting plugins.  This is the holy grail for CF and you can start doing some fun stuff.  In this case, the fun stuff is automating the complex, possibly human error-prone, steps above.  As a dev, if I can automate something and reduce the chance of something going wrong, I am all in.  If you do this, your IT/operations department will love you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/concourse/autopilot&#34;&gt;The plugin&lt;/a&gt; performs the above steps for you for performing the zero downtime deployment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://jeffsloyer.io/2015/06/19/zero-down-time-deploys-with-the-cf-autopilot-plugin/&#34;&gt;part 1&lt;/a&gt; we deployed our application manually to Bluemix using the autopilot plugin locally, in this tutorial we are going to use &lt;a href=&#34;http://codeship.com/?utm_campaign=jeffsloyer.io&#34;&gt;Codeship to automate our continuous delivery pipeline&lt;/a&gt; to use the plugin to perform the zero downtime deployments.&lt;/p&gt;

&lt;h2 id=&#34;codeship-setup&#34;&gt;Codeship setup&lt;/h2&gt;

&lt;p&gt;First make sure you have a &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-CodeShipAutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; account, if you do not sign up by clicking &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-CodeShipAutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly make sure you have signed up for a Codeship account, to do this head &lt;a href=&#34;https://codeship.com/registrations/new?utm_campaign=jeffsloyer.io&#34;&gt;here&lt;/a&gt;.  When I signed up, I clicked &amp;ldquo;Sign up with github&amp;rdquo;, make sure you do this so Codeship can authenticate with your Github account.&lt;/p&gt;

&lt;p&gt;Once you are signed in click &amp;ldquo;Setup new Project&amp;rdquo;, it will bring you a screen like below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/connectscm-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/connectscm-medium.png&#34; alt=&#34;connectscm&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the button on the left.   If you signed up with your Github account it will authenticate you with Github, if you haven&amp;rsquo;t you will need to connect your account to Github.&lt;/p&gt;

&lt;p&gt;Once you have done this you will get a screen like below.  Codeship will show you all the projects you have access to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/choose-repo-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/choose-repo-medium.png&#34; alt=&#34;choose repo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the repo you would like to use.&lt;/p&gt;

&lt;p&gt;You will be then brought to a screen that ask you to setup your pipeline.&lt;/p&gt;

&lt;p&gt;First, we need to remove the test pipeline, lets click on &amp;ldquo;Delete&amp;rdquo;. If you had unit tests you could run them here, for example &lt;code&gt;grunt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/deletepipeline-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/deletepipeline-medium.jpg&#34; alt=&#34;deletepipeline&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next since this example is a Node.Js project, we want to make sure the node modules are correct, we want to run &lt;code&gt;npm install&lt;/code&gt; here.  We need to clear out the initial starter setup commands that have been highlighed below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/clearsetup-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/clearsetup-medium.jpg&#34; alt=&#34;clearsetup&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should look like the following now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/npminstall-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/npminstall-medium.jpg&#34; alt=&#34;npminstall&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note, if you are using a different language you would want to run the appropriate dependency installer here, for example for Java &lt;code&gt;mvn install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, click &amp;ldquo;Save and goto dashboard&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Click on &amp;ldquo;Project settings&amp;rdquo; in the top right, then click on &amp;ldquo;Environment variables&amp;rdquo;.  You will be brought to a screen like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/envars-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/envars-medium.jpg&#34; alt=&#34;envars&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to setup a couple environment variables to make this work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CF_API&lt;/li&gt;
&lt;li&gt;CF_SPACE&lt;/li&gt;
&lt;li&gt;CF_ORG&lt;/li&gt;
&lt;li&gt;CF_USERNAME&lt;/li&gt;
&lt;li&gt;CF_PASSWORD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a screen shot of things setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/envarssetup-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/envarssetup-medium.jpg&#34; alt=&#34;envarssetup&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click deployment on the left and type in &amp;ldquo;master&amp;rdquo; without the quotes for the branch name and click &amp;ldquo;Save pipeline settings&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/masterbranch-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/masterbranch-medium.jpg&#34; alt=&#34;masterbranch&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &amp;ldquo;Custom Script&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/customscript-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/customscript-medium.jpg&#34; alt=&#34;customscript&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste in the following code, replace &lt;code&gt;myapp&lt;/code&gt; with the name of your app.
Note: This requires your app to have a &lt;code&gt;manifest.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should look like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/codesnip-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/codesnip-medium.jpg&#34; alt=&#34;codesnip&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &amp;ldquo;Create&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;You are all set.  Next time you do a git push to Github your app will be auto deployed to Bluemix!&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero Downtime Deployment with the CF Autopilot Plugin - Video</title>
      <link>http://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/</link>
      <pubDate>Wed, 01 Jul 2015 10:51:49 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/</guid>
      <description>&lt;p&gt;I recently wrote a &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/&#34;&gt;blog post &lt;/a&gt;on what a zero downtime deployment is, why it is important, and how to perform one. I am now posting a video on the same topic so you can learn about a zero downtime deployment by watching a video instead.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/y4zor2y-yck&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;If you prefer the tutorial and text instructions please check out &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/&#34;&gt;Zero Downtime Deployment with the CF Autopilot Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personality Box – You had me at upload</title>
      <link>http://www.jeffsloyer.io/post/personality-box-you-had-me-at-upload/</link>
      <pubDate>Mon, 29 Jun 2015 10:46:59 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/personality-box-you-had-me-at-upload/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;http://www-03.ibm.com/press/us/en/pressrelease/47185.wss&#34;&gt;announced yesterday&lt;/a&gt;, IBM has formed a partnership with &lt;a href=&#34;http://Box.com&#34;&gt;Box.com&lt;/a&gt;, a partnership that includes the integration of Box into the Bluemix catalog. With its REST-based Content and View APIs, embedding enterprise-grade file storage into your app and enabling file sharing among your users has never been simpler.&lt;/p&gt;

&lt;p&gt;To help you on your way to becoming a file-sharing guru, Bluemix developer advocate Jake Peyser and I have built a sample app that you can leverage as you begin to explore the possibilities of the &lt;a href=&#34;http://box.com&#34;&gt;Box.com&lt;/a&gt; APIs.&lt;!-- more --&gt; The video below shows the application and outlines the steps to create it:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KPT7ttRRpr4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;If you want to follow &lt;em&gt;written&lt;/em&gt; step-by-step instructions on how we leveraged the &lt;a href=&#34;http://box.com&#34;&gt;Box.com&lt;/a&gt; and Watson Personality Insights services to create our app, see &lt;a href=&#34;https://developer.ibm.com/bluemix/2015/06/24/intro-to-box/&#34;&gt;Integrate Cloud File Storage and Sharing into your Bluemix App with Box&lt;/a&gt;. We encourage you to pick up where we left off and build on this sample!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero Downtime Deployment with the CF Autopilot Plugin</title>
      <link>http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</link>
      <pubDate>Fri, 19 Jun 2015 10:41:59 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</guid>
      <description>

&lt;p&gt;Zero down time deployments are a must for any Internet app running at scale.  Without the use of zero down time deployments, you would have to take down your application even just for a fraction of a second but in that fraction of a second you could lose a transaction or a purchase from a customer.  This is not acceptable anymore.  Some people like to call these apps cloud based apps, which I think is fine, but I’d rather call them Internet scale or born on the cloud apps.  The companies who create these apps understand the apps’s need to stay up, because their app is their only lifeline and, hopefully, a source of income from the world.&lt;/p&gt;

&lt;p&gt;Companies such as Facebook, Etsy, and Twitter have been using zero down time deployments for years.  They thrive because they do multiple deployments to production a day.  The number of deployments they do in one day is actually larger than most enterprise companies do in a full year.  Part of the trick is that the code changes are small but they have employed strategies such as zero down time deployments to get code into production as fast as they can.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&#34;ground-rules&#34;&gt;Ground Rules…&lt;/h2&gt;

&lt;p&gt;There are many names for this, zero down time deployments, obviously, but some people use the term blue/green, while others use the term red/back.  They all mean the same thing.  Instead of having a bias for colors in this post lets use the term “zero down time”.&lt;/p&gt;

&lt;p&gt;So what is it?&lt;/p&gt;

&lt;p&gt;Zero Down time deployments are basically what they sound like.  You update production without taking downtime.  It’s not always that simple though.  For the context of this post we are going to be talking about how to do zero down time deployments in Cloud Foundry.&lt;/p&gt;

&lt;p&gt;Basically it’s a little trick to taking advantage of the way Cloud Foundry runs underneath the covers.  Before we jump into it, there are a couple of caveats that we should discuss first.  To successfully take advantage of zero down time deployments you should have followed the &lt;a href=&#34;http://12factor.net/&#34;&gt;12 Factor App guidelines&lt;/a&gt;. This will ensure that your app is horizontally scalable and can be deployed in a manner that will result in zero down time.  Below are some highlights that you should abide by.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do not store sessions on disk or in memory.  Store them in some type of shared database or file system.  This could be your favorite database or an in memory database as well.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not store configuration information in your application or on disk.  You should store your config info for your app in environment variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is probably the most important, your application needs to be forward and backwards compatible with your database schema…  Say what?  Yes, you need to trust your developers to manage the database schema from your code.If you are using a relational database, you will need some kind of framework to do database migrations for you.  It’s not just that simple with relational databases though…  If you have a big database migration DO NOT PERORM MIGRATIONS THAT WILL INTERRUPT TRAFFIC!  Perform them slowly over time where migrations do not impact users and traffic.  Yahoo had a major application upgrade and it took them 6 months to do the migration to avoid impacting users and taking an outage.  Remember we do not take outages…  If you are in NoSQL land, your life is easier.  Just revision your API’s and educate your developers on forward and backwards data compatibility.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;importance-of-zero-down-time-deployments&#34;&gt;Importance of Zero Down Time Deployments&lt;/h2&gt;

&lt;p&gt;So why are zero down time deployments so important?  The answer is simple, to keep your website/app up so you can make money!  Well that might be over-simplified a bit, but basically it all boils down to keeping your app up so you can continue to do what you do best, and hopefully that involves making money.  If you look at Facebook, for example, they put code into production weeks and months before a feature is exposed to the public.  They extensively test the features on employees first, then slowly enable the features to the rest of the world.&lt;/p&gt;

&lt;p&gt;This is key, getting features in front of your customers and getting feedback from them.  If it works that’s great, but if it doesn’t at least you know in a short time frame so you can remove it and pivot to go in a different direction.  The current landscape is so fast paced that if you don’t get a feature out, your competition could beat you.&lt;/p&gt;

&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;So let’s walk through what needs to happen to perform zero downtime deployments in Cloud Foundry.  For the use of the walk-through, the application is currently taking traffic on &lt;code&gt;myapp.mybluemix.net&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Deploy your app or use a currently running app.
Currently your application is taking traffic on &lt;code&gt;myapp.mybluemix.net&lt;/code&gt;.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.001-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.001-medium.png&#34; alt=&#34;zero downtime graphics.001 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the new version of your app to &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt;.
At this time there is currently two versions of your app running.  &lt;code&gt;myapp.mybluemix.net&lt;/code&gt; is still taking production traffic.
The new app &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt; is separate, it can be pointed to your production API keys and databases at this point.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.002-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.002-medium.png&#34; alt=&#34;zero downtime graphics.002 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perform smoke tests on the new version of the application.
Some people say this step is optional, but to me its not.  This is key to make sure there wasn’t any weird regressions or merge issues, they CAN happen…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Map production traffic to the new version of your app.
At this point the old version of your app and the new version are both taking production traffic.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.003-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.003-medium.png&#34; alt=&#34;zero downtime graphics.003 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unmap production traffic from the old version of the app.  You can optionally delete the old version as well.
At this point the new version becomes production and ONLY it is taking traffic.
The new version still has two URL’s though, &lt;code&gt;myapp.mybluemix.net&lt;/code&gt; and &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt;.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.004-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.004-medium.png&#34; alt=&#34;zero downtime graphics.004 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove the temporary route &lt;code&gt;myapp-temp.mybluemix.net&lt;/code&gt; from the new version of your app.
&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.005-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/zero-downtime-graphics.005-medium.png&#34; alt=&#34;zero downtime graphics.005 Zero Down Time Deploys with the CF Autopilot Plugin&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While this can be scripted there really isn’t a need to do that, there is a Cloud Foundry CLI plugin to do this.&lt;/p&gt;

&lt;h2 id=&#34;autopilot-plugin&#34;&gt;Autopilot plugin&lt;/h2&gt;

&lt;p&gt;Recently the Cloud Foundry CLI started supporting plugins.  This is the holy grail for CF and you can start doing some fun stuff.  In this case, the fun stuff is automating the complex, possibly human error-prone, steps above.  As a dev, if I can automate something and reduce the chance of something going wrong, I am all in.  If you do this, your IT/operations department will love you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/concourse/autopilot&#34;&gt;The plugin&lt;/a&gt; performs the above steps for you for performing the zero downtime deployment.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure you have a &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; account, if you do not sign up &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install dependencies.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Golang installed (&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;instructions&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Version 6.7.0 or greater of the Cloud Foundry CLI
To check what version you have running, run &lt;code&gt;cf -v&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[01:36 PM] jsloyer@jeffs-mbp-2 [~]&amp;gt;cf -v
cf version 6.8.0-b15c536-2014-12-10T23:34:29+00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To upgrade go &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ensure you have an app running/already deployed.  The plugin requires that you have an app already deployed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following.  I will describe what each line is doing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/concourse/autopilot
cf install-plugin $GOPATH/bin/autopilot
cf login -a ${CF_API} -u ${CF_USERNAME} -p ${CF_PASSWORD} -o ${CF_ORG} -s ${CF_SPACE}
cf zero-downtime-push myapp -f manifest.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Line 1 fetches the source code for the plugin.
Line 2 installs the plugin
Line 3 logins into Bluemix.  I have the sensitive information replace with environment variables.
Line 4 performs the zero down time deployment.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The plugin does require a &lt;code&gt;manifest.yml&lt;/code&gt;.  The plugin basically views the &lt;code&gt;manifest.yml&lt;/code&gt; files as the truth of the state of the application.&lt;/p&gt;

&lt;h2 id=&#34;extensions-with-ci-pipelines&#34;&gt;Extensions with CI Pipelines&lt;/h2&gt;

&lt;p&gt;This will be forthcoming in an upcoming blog post on how to use some of the most popular CI engines out there.&lt;/p&gt;

&lt;h2 id=&#34;recap&#34;&gt;Recap&lt;/h2&gt;

&lt;p&gt;Just to review what we did here, we learned what zero down time deployments are, why they are crucial to any Internet scale application, and how to perform a zero down time deployment.  Then, we took it a step further on how to use a Cloud Foundry plugin to do the heavy lifting for us and automate the zero down time deployment.&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;video&#34;&gt;Video&lt;/h2&gt;

&lt;p&gt;I have also published a video if you prefer to watch that instead, please check out &lt;a href=&#34;http://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/&#34;&gt;Zero Downtime Deployment with the CF Autopilot Plugin – Video.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;additional-part-s&#34;&gt;Additional part&amp;rsquo;s&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix-and-codeship/&#34;&gt;Zero downtime deployments with Bluemix and Codeship&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>