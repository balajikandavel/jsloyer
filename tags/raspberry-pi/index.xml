<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on JeffSloyer.io</title>
    <link>http://www.jeffsloyer.io/tags/raspberry-pi/index.xml</link>
    <description>Recent content in Raspberry Pi on JeffSloyer.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <atom:link href="http://www.jeffsloyer.io/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>IoT Python app with a Raspberry Pi and Bluemix</title>
      <link>http://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/</link>
      <pubDate>Thu, 02 Apr 2015 10:29:53 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/</guid>
      <description>

&lt;p&gt;This is an extension/continuation from the blog post on how to create a &lt;a href=&#34;http://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/&#34;&gt;basic Python webapp&lt;/a&gt;.  In this tutorial we are going to go through how to integrate a Python Flask webapp in Bluemix with the &lt;a href=&#34;https://internetofthings.ibmcloud.com/&#34;&gt;Internet of Things Foundation&lt;/a&gt; in Bluemix with a Raspberry Pi and two sensors on the Raspberry Pi.  The tutorial also uses Twilio to interact with the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;So what does this look like?  Here is a simple architecture diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/raspberrypidiagram-medium.png&#34; alt=&#34;raspberrypidiagram IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;In the above diagram there is two flows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first flow involves pressing a HTML button in the Python Flask app in Bluemix to either turn on or off an LED on the Raspberry Pi.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The second flow involves pressing a physical button on the breadboard on the Raspberry Pi and using the IoT service in Bluemix and our app in Bluemix it will send a text message of our choosing to a phone number we enter in the Python Flask app in Bluemix using Twilio.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This all took only about 100 lines of code, pretty cool huh?&lt;/p&gt;

&lt;p&gt;If you prefer to watch a video of this instead of going through the written steps in this tutorial, check out the video below.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;There is two parts to setting this up.  If we take a look at the architecture diagram above we see that there is a Raspberry Pi piece and then a Bluemix piece.  We are going to go through the Raspberry Pi piece first then we will go through the Bluemix piece.&lt;/p&gt;

&lt;h2 id=&#34;raspberry-pi-setup-steps&#34;&gt;Raspberry Pi Setup Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sign up for a Bluemix account, visit &lt;a href=&#34;http://bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp&#34;&gt;http://bluemix.net&lt;/a&gt; in your web browser and click “Sign-up” in the top right.  We require a couple bits of information&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for an email to arrive, it should only take a couple minutes.  There should be a link in the email that says “Click here to complete your registration”, click that.  Sign in with the username and password you created from step 1.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Obtain a Raspberry Pi, a bread board, wires, a LED, and a button  (your best bet is getting a starter kit such as the &lt;a href=&#34;http://www.canakit.com/&#34;&gt;Canakit&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Place an LED in the breadboard (place the shorter side to the left)&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/led-medium.png&#34; alt=&#34;led IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Place a 220 ohm resistor in the breadboard connecting the short side (the left side of the LED) to the ground rail (the rail with the – sign).  Make sure to place the side of the resistor with the red stripes closest to the LED&lt;em&gt;NOTE:&lt;/em&gt; The way the breadboard works is connections run vertically not horizontally&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/resistor-medium.png&#34; alt=&#34;resistor IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect a wire from the ground rail to the GND on the pinout board&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/ground-medium.png&#34; alt=&#34;ground IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the right side of the LED, connect a wire to the the port labeled 17.&lt;strong&gt;NOTE:&lt;/strong&gt; The way the breadboard works is connections run vertically not horizontally.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/gpio17-medium.png&#34; alt=&#34;gpio17 IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Place the button in the breadboard, it takes a bit of force to press it in all the way.  It won’t break it.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/button-medium.png&#34; alt=&#34;button IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect a wire from the right side of the button to the ground rail.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/buttonground-medium.png&#34; alt=&#34;buttonground IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect a wire from the ground rail to a GND port, it doesn’t matter which one it is&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/buttongroundrail-medium.png&#34; alt=&#34;buttongroundrail IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lastly, connect a wire from the left side of the button to GPIO port 18.&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/gpio18-medium.png&#34; alt=&#34;gpio18 IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to either use the console for our Raspberry Pi and the terminal application on the device itself or use SSH.  I am going to use SSH.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To get the IP address of your Raspberry Pi the easiest thing is to open up the terminal app on the Raspberry Pi, it is under accessories -&amp;gt; Terminal&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;code&gt;ifconfig&lt;/code&gt;..  If you are connected over Ethernet the IP address will be under eth0, if you are connected over wifi, the IP address will be under wlan0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to ssh into the device.—Windows, download Putty and use that to connect to the IP address—Mac and Linux, open the Terminal app, type &lt;code&gt;ssh pi@myipaddress&lt;/code&gt; where myipaddress is the IP address of the Raspberry Pi, ex. &lt;code&gt;192.168.1.65&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The password is raspberrypi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to run some commands to update our Raspberry Pi, run the following.  It will ask you to confirm with the “Y” key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo-apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to install a helper library for using GPIO&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://git.drogon.net/wiringPi
cd wiringPi
./build
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to install the IoT library on the Raspberry Pi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -LO https://github.com/ibm-messaging/iot-raspberrypi/releases/download/1.0.2/iot_1.0-1_armhf.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sudo dpkg -i iot_1.0-1_armf.deb&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to get the device ID of our raspberry Pi do this run the following and save the output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service iot getdeviceid
#example output
The device id is b827eba5b236
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will want to copy the id &lt;code&gt;b827eba5b236&lt;/code&gt;, yours obviously will be different&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up a web browser and goto &lt;a href=&#34;http://bluemix.net/&#34;&gt;bluemix.net&lt;/a&gt;, and click on “Catalog” in the top.  Scroll down to the very bottom and click “Internet of Things”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give the service a name, use iot-python (you must do this exactly or later things won’t work), for App choose “Leave unbound”, click “Create”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the left of the next page click “Launch dashboard”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the top click on “Devices”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click “Add Device”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the second field (it says e.g. mydevice type) type in exactly &lt;code&gt;raspberrypi&lt;/code&gt; (you need to have it spelled like this or there will be issues).  For device ID paste in the device ID we got from step 20, mine is &lt;code&gt;b827ba5b236&lt;/code&gt;.  Click continue.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the next page it will show something like below, copy this and switch back to terminal on your Raspberry Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org=pwftki
type=raspberrypi
id=000000000000
auth-method=token
auth-token=cXQaGx8o!a9HwxM-ka
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose your favorite text editor but I am going to use vi.  Type the following to open the file we want to edit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/iotsample-raspberrypi/device.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To paste the text press the “i” key.  Then paste the text, this will depend on the OS you are on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To save the file hit the “Esc” key.  Then Type “:wq” and then press “Enter”.  That will save the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let’s restart the IoT service on our Raspberry Pi to start sending the data to the IoT service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service iot restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to download the Python code to run on the Raspberry Pi, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
git clone https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git
cd python-iot-raspberry-pi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we need to install the package manager for Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pip
sudo pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One last bit, we need a config file for our app before we can start it.  Lets run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi ~/device.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remember this is vi again, so remember the shortcuts for inserting text and saving it from step 29,30.  The contents of the file should look something like below, replacing yourapikey, yourdeviceid, youriotorg, and yourapitoken with the correct values. To generate the API key and token we can get them from going back to the web browser and going to the Internet of Things Foundation.  At the top  click on API Keys.  Click “New API Key”.  The values that it gives you will be the values you use for the yourapitoken and yourapikey. &lt;code&gt;yourdeviceid&lt;/code&gt; is the value we got from step 20 &lt;code&gt;youriotorg&lt;/code&gt; is from step 27, it is also in your config file; in my case my value is pwftki. Let’s save the file (remember, “Esc”, “:wq”, “Enter”)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[application]
org=youriotorg
id=yourdeviceid
auth-method=apikey
auth-key=yourapikey
auth-token=yourauthtoken
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OK, so now we can launch/start the app on the Raspberry Pi.  To do that run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/python-iot-raspberry-pi
sudo python client.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;bluemix-app-setup-steps&#34;&gt;Bluemix App Setup Steps&lt;/h2&gt;

&lt;h6 id=&#34;note-the-following-steps-are-to-be-run-on-your-desktop-not-the-raspberry-pi&#34;&gt;NOTE:  The following steps are to be run on your desktop NOT the Raspberry Pi.&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We will need to install the Cloud Foundry CLI to deploy our app to Bluemix.  To do this head over to &lt;a href=&#34;https://github.com/cloudfoundry/cli/releases&#34;&gt;https://github.com/cloudfoundry/cli/releases&lt;/a&gt;.  Choose the appropriate installer for your platform, download it and run the installer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So let’s open up a new terminal Window, we will need to do the rest on our development machine/laptop.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to download the Python code for our app.  Run the following.  If you don’t have git installed follow these instructions &lt;a href=&#34;http://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git
cd python-iot-raspberry-pi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your web browser go back to the tab that you have Bluemix open with.  In the top click “Catalog”, scroll down to find “Twilio”.  Click on that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you already have a Twilio account and want to use that skip to step 6.  If you don’t have a Twilio account on the right hand side click “Register at Twilio”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Twilio will ask you for some information and you will need to verify your phone number.  This is important as only numbers verified with the free plan will work with your app.   If you want to be able to text any number you need to pay for Twilio, its $1/month/phone number.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you are signed up for your account, head to &lt;a href=&#34;https://www.twilio.com/user/account/voice-messaging&#34;&gt;https://www.twilio.com/user/account/voice-messaging&lt;/a&gt;.  Near the top right there will be a twistie that says “Show API Credentials”, click that.  There is two pieces of information here, the Account SID and Auth Token.  We will need to copy these back to the Bluemix tab we have open with Twilio.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Paste your Account SID in the field in Bluemix that says Account SID, paste your Auth Token in the Auth Token field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the Service name you must type in this exactly iot-twilio&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the App, choose “Leave Unbound”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Create.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Switch back to the terminal that you have on your local dev machine, not your Raspberry Pi.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to login to Bluemix, to do that, type &lt;code&gt;cf login -a https://api.ng.bluemix.net&lt;/code&gt;. It will ask you for your username and password. This is from step 1 in the Raspberry Pi section above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To deploy our application all we need to do now is type &lt;code&gt;cf push myappname&lt;/code&gt; where myapp name is a unique name you choose for your app.&lt;em&gt;NOTE:&lt;/em&gt; If you get an error mentioning a route is taken, choose a different name and run &lt;code&gt;cf push&lt;/code&gt; with a new app name.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take about a minute or two to deploy your application but eventually you will get some output that looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: testapp-jbs.mybluemix.net
last uploaded: Fri Jul 31 00:25:17 UTC 2015
stack: lucid64
buildpack: SDK for Node.js(TM) (ibm-node.js-0.12.7)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a row that says &lt;code&gt;urls:&lt;/code&gt;, copy that URL and paste it into your browser.&lt;/p&gt;

&lt;p&gt;If everything went well you should have a page that looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/pythoniotapp-medium.png&#34; alt=&#34;pythoniotapp IoT Python app with a Raspberry Pi and Bluemix&#34; /&gt;&lt;/p&gt;

&lt;p&gt;An important note here, do not press the button on the Raspberry Pi until you enter a phone number and text message here, if you do the app will crash.  If you do this you can restart you app with &lt;code&gt;cf restart myappname&lt;/code&gt;, where myappname is the name of the app you chose above.&lt;/p&gt;

&lt;p&gt;When you click the “On” button it should turn the light on for you.  If you press the “Off” button it should turn the light off.&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Follow us on Twitter at &lt;a href=&#34;https://twitter.com/IBMBluemix&#34;&gt;@IBMBluemix&lt;/a&gt; and follow the author of this blog post (Jeff Sloyer, one of our developer advocates) at &lt;a href=&#34;https://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Control home devices with Bluemix Internet of Things (Part 2)</title>
      <link>http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/</link>
      <pubDate>Tue, 17 Feb 2015 10:02:18 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/</guid>
      <description>

&lt;h2 id=&#34;part-2-configuring-the-raspberry-pi&#34;&gt;Part 2: Configuring the Raspberry Pi&lt;/h2&gt;

&lt;p&gt;This is a continuation of Part 1 of Controlling home devices with Bluemix Internet Of Things  If you haven’t read &lt;a href=&#34;http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/&#34;&gt;Part 1&lt;/a&gt;, please do that first…&lt;/p&gt;

&lt;p&gt;In Part 1 we got the electrical work out of the way.  We wired up the relay’s and connected the circuit’s.  In this part of the 3 part series we will configure the Raspberry Pi to control the relay’s that we wired up in part 1.&lt;/p&gt;

&lt;p&gt;So without delay let’s jump into the next part.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-software-on-the-raspberry-pi&#34;&gt;Install software on the Raspberry Pi&lt;/h2&gt;

&lt;p&gt;The first step of getting your Raspberry Pi setup is installing Raspbian.  If you have the Canakit its pretty easy, just plug in the wifi dongle and insert the SD card and plug in power.  If you don’t have the Canakit follow the instructions from &lt;a href=&#34;http://www.raspberrypi.org/help/noobs-setup&#34;&gt;here&lt;/a&gt;.  Once you get Raspbian installed open up a terminal.&lt;/p&gt;

&lt;p&gt;Next, we will need to update Raspbian to the latest.  To do this run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we will need to download  &lt;a href=&#34;http://lightshowpi.org&#34;&gt;LightShowPi&lt;/a&gt;.  &lt;a href=&#34;http://lightshowpi.org&#34;&gt;LightShowPi&lt;/a&gt; is the foundation for syncing the lights to the music.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install git (if you don&#39;t already have it)
sudo apt-get install git-core




# Clone the repository to /home/pi/lightshowpi
cd ~
git clone https://togiles@bitbucket.org/togiles/lightshowpi.git

# Grab the stable branch
cd lightshowpi git fetch &amp;amp;&amp;amp; git checkout stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to install LightShowPi, run the following.  Please not the install step will take some time, be patient…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /home/pi/lightshowpi
sudo ./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the install is complete we need to reboot the Raspberry Pi to pickup some new environment variables. To reboot run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wire-up-the-raspberry-pi-s-breadboard&#34;&gt;Wire up the Raspberry Pi’s breadboard&lt;/h2&gt;

&lt;p&gt;Once we have rebooted we need to connect the bread board to the Raspberry Pi and connect the bread board to the relays.  This took some tinkering to figure out the GPIO ports but below I have posted a picture of mybread board on how it was constructed.   For me I set everything up with 8 channels first and using LED’s provided in the Canakit to make sure everything was working then I moved over to the real relays.  So let’s do that.&lt;/p&gt;

&lt;p&gt;I would highly recommend following the steps in &lt;a href=&#34;https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI&#34;&gt;this page&lt;/a&gt; on getting your bread board working.&lt;/p&gt;

&lt;p&gt;Below is a picture of my finished bread board with 16 channels.  I have included a wiring diagram as well.  Basically each GPIO port goes to the input side of the relay controller.  If you notice I have a couple left over LED’s on the bread board, this was done via the tutorial list above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/2015-02-16-11.31.19-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/2015-02-16-11.31.19-medium.jpg&#34; alt=&#34;2015 02 16 11.31.19 768x1024 Control home devices with Bluemix Internet of Things (Part 2)&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is going on above is each of the delays is plugged into a GPIO port and then plugged into the ground rail and connected by a resistor.  The particular resistor I am using is a 220 Ohm resistor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/06/raspberry-pi-lights-wiring-diagram-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/raspberry-pi-lights-wiring-diagram-medium.png&#34; alt=&#34;raspberry pi lights wiring diagram Control home devices with Bluemix Internet of Things (Part 2)&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let’s test some things out.  Let’s play a pre-loaded song.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/lightshowpi
sudo python py/synchronized_lights.py --file=/home/pi/lightshowpi/music/sample/ovenrake_deck-the-halls.mp3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the relays should be flashing.  At this point you can plug the lights into the outlets as well.  If you notice the lights go on solid for 30 seconds before the songs play, we can override this.  Additionally this file has the GPIO pins mapping as well.  This mapping is for using the full 16 channels, if you are using less just remove some of the mappings from the end of the gpio_pins line.  To do this we need to place a config file in our home directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
touch .lights.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Choose your favorite text editor and put the following contents in the file.  We change the time it waits from 30 seconds to 1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[hardware]
gpio_pins = 0,1,2,3,4,5,6,7,21,22,23,24,25,26,28,29

[lightshow]
preshow_configuration =
    {
        &amp;quot;transitions&amp;quot;: [
            {
                &amp;quot;type&amp;quot;: &amp;quot;on&amp;quot;,
                &amp;quot;duration&amp;quot;: 1,
                &amp;quot;channel_control&amp;quot;: {
                }
            },
            {
                &amp;quot;type&amp;quot;: &amp;quot;off&amp;quot;,
                &amp;quot;duration&amp;quot;: 1,
                &amp;quot;channel_control&amp;quot;: {
                }
            }
        ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is it for this part.  In the next part of this series we will configure the Bluemix app to respond to text message votes and then the app to interface with the python code that controls the lights.&lt;/p&gt;

&lt;h2 id=&#34;parts-in-the-series&#34;&gt;Parts in the Series&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Control home devices with Bluemix Internet of Things</title>
      <link>http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</link>
      <pubDate>Fri, 06 Feb 2015 09:49:21 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</guid>
      <description>

&lt;p&gt;The number of Internet connected devices is growing dramatically, it is expected to increase from 15 billon devices in 2015 to 40 billion devices in 2020.  These devices make up something called the Internet of Things.  These devices can be controlled remotely and interconnected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/iotdevicesincrease-medium.png&#34; alt=&#34;iotdevicesincrease Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While a lot of these devices can be connected to the Internet, most of them are &amp;ldquo;dumb&amp;rdquo; devices right now.  To turn these &amp;ldquo;dumb&amp;rdquo; devices into smart devices you can use the &lt;a href=&#34;http://internetofthings.ibmcloud.com&#34;&gt;Internet of Things&lt;/a&gt; to connect them to the cloud.  Simple things such as a washing machine or a coffee pot can be connected to the Internet.  More practical systems can be connected also, such as a home automation system or a thermostat.  Going even further a mine could connect safety sensors to the Internet of Things as well.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The Internet of Things allows for these devices to either be controlled or act as sensors and provides a means for them to communicate.  This is done over a protocol called MQTT. According to &lt;a href=&#34;http://mqtt.org/&#34;&gt;mqtt.org&lt;/a&gt;, &amp;ldquo;MQTT is a machine-to-machine (M2M)/Internet of Things connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport.&amp;rdquo;  This works great for many devices as-is, doesn’t have many dependencies, it is very lightweight, and doesn’t require tremendous amounts of processing power.&lt;/p&gt;

&lt;p&gt;IBM Bluemix provides a platform for creating these apps that utilize all these sensors.  You can basically almost use any programming language you want, Bring Your Own Language (BYOL) and utilize services that do the heavy lifting for you.  This heavy lifting is the Internet of Things (IoT) service in Bluemix.  It implements that MQTT protocol and allows you to control and receive data from these devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/robots-blog-post-header1-medium.jpg&#34; alt=&#34;robots blog post header1 1024x665 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do you have a bunch of left over Christmas lights sitting around that will be collecting dust till next year? Until now Christmas lights are a once a year thing, that isn’t true anymore.  Time to get the dust off of your lights and use them for something fun! Enter Christmas Lights controlled by a Raspberry Pi via IoT in Bluemix!&lt;/p&gt;

&lt;p&gt;You can control these Christmas Lights using the Internet of Things and IBM Bluemix. Who &lt;em&gt;doesn’t&lt;/em&gt; love large amounts of Christmas lights?  I sure love them.  Add on to that syncing lights to music and the ability to control lights from your phone and giving passersbys the ability to vote for songs they wanna see the lights synced to by texting.  How cool is that?&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction:&lt;/h2&gt;

&lt;p&gt;This is going to be a three part series: The first part (this post) will focus on the hardware setup, all the wiring and connecting things up to the Raspberry Pi.  The second part will focus on the software configuration of the Raspberry Pi, and the final part will focus on the Bluemix app that allows people to vote on songs to play and the integration to control the Raspberry Pi with the IoT service in Bluemix.&lt;/p&gt;

&lt;p&gt;So some of our goals that we are going to accomplish are the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Part 1&lt;/strong&gt; – Setup and wire together relays, outlets, and the Raspberry Pi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/&#34;&gt;&lt;strong&gt;Part 2&lt;/strong&gt;&lt;/a&gt; – Power on the Raspberry Pi, installed Raspbian (OS for the Pi), install and configure the lighting control software&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Part 3&lt;/strong&gt; – Deploy a Bluemix app with the IoT, Twilio, and Cloudant services to interact with users and the Raspberry Pi (an example of the app is &lt;a href=&#34;http://lights.mybluemix.net/&#34;&gt;http://lights.mybluemix.net/&lt;/a&gt;; please note this is not connected to my Raspberry Pi right now, so clicking the play button won’t do anything.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a little teaser of the expected outcome:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_nWcIvOSNJE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Let’s jump into it…&lt;/p&gt;

&lt;h2 id=&#34;part-1-setting-up-the-hardware&#34;&gt;Part 1: Setting up the hardware&lt;/h2&gt;

&lt;p&gt;These instructions have been adapted from the following sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/&#34;&gt;https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI&#34;&gt;https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://lightshowpi.org/download-and-install&#34;&gt;http://lightshowpi.org/download-and-install&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://lightshowpi.org/configuring-and-testing-your-hardware&#34;&gt;http://lightshowpi.org/configuring-and-testing-your-hardware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://lightshowpi.org/play-music&#34;&gt;http://lightshowpi.org/play-music&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is getting a Raspberry Pi, I highly recommend getting the &lt;a href=&#34;http://www.amazon.com/CanaKit-Raspberry-Ultimate-Starter-Components/dp/B00G1PNG54/&#34;&gt;CanaKit on Amazon&lt;/a&gt;.  It comes with most of everything you will need.  Depending on how fancy and clean you want your wiring to look you will need to take a trip to your local hardware/electrical store, more on that later.&lt;/p&gt;

&lt;p&gt;The first step is deciding how many individual light channels you want—you can do up to 48 actually, but for this post we will doing 16 channels.  What that means is 16 individual strands of lights that can be controlled.  So let’s make a shopping list.&lt;/p&gt;

&lt;p&gt;Shopping List:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;8 two gang outlets&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 4 gang blue plastic outlet boxes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;50 feet of 12 gauge electrical wire&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 bags of assorted wire nuts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 relays (1 relay per each 8 light channels, available &lt;a href=&#34;http://www.amazon.com/gp/product/B006J4G45G/&#34;&gt;on Amazon&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;1 powerstrip&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 electrical extension cords&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;16 strands of Christmas lights&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tools Required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Wire Stripper&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Screw Drivers (phillips and flat)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Multimeter (optional)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My brother (&lt;a href=&#34;https://twitter.com/esloyer&#34;&gt;@esloyer&lt;/a&gt;) helped me wire this whole thing up and came up with an adapted wiring schema based off the sites above, thanks bro!&lt;/p&gt;

&lt;p&gt;Once you get all the items on the shopping list we need to start taking apart the 50 feet of wire, there is 2 wires inside of the casing, a black and then a white one.  We need to get them out of the casing, take a pocket knife or utility knife and make a cut into the casing at one end, you can basically then peal back the casing on the whole 50 feet of wire then.&lt;/p&gt;

&lt;p&gt;Below is a wiring diagram that we need to complete.  You can do this multiple ways but below is a suggestion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/Capture-medium.png&#34; alt=&#34;Capture 1024x642 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What we need to do is basically daisy chain all the &amp;ldquo;hot&amp;rdquo; wires together between each set of 4 gang double gang outlets.  We do this so we don’t overload a particular circuit.  So to do this we need to cut the end off of our cheap extension cord that has a plug on it, we need to then strip the wires, and then identity which wire is the hot/positive wire.  Below is a picture of a wire, the hot/positive wire will have dashes or stripes on it, the cold/neutral wire will NOT have any dashes or stripes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/electrical-cord-medium.jpg&#34; alt=&#34;electrical cord 1024x764 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We need to take the hot wire and put it into a wire nut.  We will then take some wire from our 50 feet, strip one of the ends and twist it into the wire nut.  This will get attached to positive input on the relay.  We need to repeat this for each channel.  In the picture below I have an additional wire going from the first wire nut to another wire nut because all the wires going to the relay wouldn’t fit into one wire nut.  We are just effectively connecting two wires together here.&lt;/p&gt;

&lt;p&gt;The next step is running a wire from each channel on the relay to electrical outlet.  This is the hot wire to each outlet but this wire is being controlled by the relay.  Think of the relay as a simple on/off switch that you would find at home to control a light.  On most double electrical outlets there is a tab on the side that comes enabled that makes most receptacles operate as one, this is desirable in a house so an electrician only has to run one wire to the outlet but in our case we want to take advantage of controlling both receptacles.  We need to break this tab on both sides of the outlet.  Take a pair of needle nodes pliers and bend the tab back and forth and eventually it will come off.  See the photos below.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/FH13MAR_SWIOUT_14-medium.jpg&#34; alt=&#34;FH13MAR SWIOUT 14 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/electrical-outlet-garbage-disposal-5-medium.jpg&#34; alt=&#34;electrical outlet garbage disposal 5 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/electrical-outlet-garbage-disposal-4-medium.jpg&#34; alt=&#34;electrical outlet garbage disposal 4 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So next we need to connect our cold/negative wires to each of the outlets.  If you look at the wiring diagram (above) I have one cold/neutral wire going to the first outlet and each additional outlet is daisy chained to it.  This is just to complete the circuit.  Below is the finished product.  We basically have our outlets daisy chained together with our cold/neutral wires and then hold/positive wires have individual channels to the relay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/06/2014-12-02-15.16.57-medium.jpg&#34; alt=&#34;2014 12 02 15.16.57 Control home devices with Bluemix Internet of Things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations the hard part is over! Well, at least for me, since electrical stuff isn’t my forte.&lt;/p&gt;

&lt;h2 id=&#34;parts-in-the-series&#34;&gt;Parts in the Series&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>