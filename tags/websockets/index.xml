<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Websockets on JeffSloyer.io</title>
    <link>http://www.jeffsloyer.io/tags/websockets/index.xml</link>
    <description>Recent content in Websockets on JeffSloyer.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <atom:link href="http://www.jeffsloyer.io/tags/websockets/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>(Video) - Deploying your Meteor app to Cloud Foundry and Bluemix</title>
      <link>http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</link>
      <pubDate>Mon, 24 Aug 2015 11:03:35 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</guid>
      <description>&lt;p&gt;This is a follow up post to a previous post on &lt;a href=&#34;http://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/&#34;&gt;Deploying your Meteor app to Cloud Foundry and Bluemix.&lt;/a&gt;  In this post we went through how to deploy a Meteor app to Cloud Foundry and Bluemix.  In this post we will be going through the same thing except in a video format.  Check out the video below.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/dyVmB8vHFaE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying your Meteor app to Cloud Foundry and Bluemix</title>
      <link>http://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</link>
      <pubDate>Wed, 05 Aug 2015 11:03:35 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/07/meteor-logo-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/07/meteor-logo-medium.png&#34; alt=&#34;meteor-logo&#34; /&gt;&lt;/a&gt;Meteor is a pretty powerful and cool framework for developing modern webapps all in Javascript.  It provides some really cool things as a modern UI, responsive code that works on a desktop and a mobile device, and some really slick features with websockets with client and server side rendering.&lt;/p&gt;

&lt;p&gt;I heard about Meteor mid-2014 but it peaked my interest last week when I was at a customer and a developer at the customer was building a Meteor app and they were asking how to run it on Bluemix.  Of course doing my job I helped the developer get the app running but it took a couple tweaks to the Cloud Foundry buildpack for Meteor.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;You might be asking what a buildpack is, that&amp;rsquo;s totally fine.  In Cloud Foundry you can use basically any language you want for your app, all you need is some code to laydown the app server or middleware and compile your code together and install dependencies.  For Meteor there is a buildpack available but it was slighly out of date.&lt;/p&gt;

&lt;p&gt;Last week and this week I committed some changes to the buildpack to make it more robust and compatible for newer Meteor apps.&lt;/p&gt;

&lt;p&gt;The buildpack now will allow you to use your existing Meteor app and push it to Cloud Foundry and Bluemix.&lt;/p&gt;

&lt;p&gt;For the rest of this blog post I am going to walk through on how to build an example Meteor app and push it to Bluemix.&lt;/p&gt;

&lt;h2 id=&#34;pre-req-s&#34;&gt;Pre-req&amp;rsquo;s&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sign up for a &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-MeteorSample-_-Node-MongoLab-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; account.  Go &lt;a href=&#34;http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-MeteorSample-_-Node-MongoLab-_-BM-DevAd&#34;&gt;Bluemix&lt;/a&gt; and click on Sign-up in the top right hand corner.&lt;/li&gt;
&lt;li&gt;Meteor installed locally, go &lt;a href=&#34;https://www.meteor.com/install&#34;&gt;Meteor install&lt;/a&gt; to install Meteor&lt;/li&gt;
&lt;li&gt;Cloud Foundry Command Line (CLI) installed, go &lt;a href=&#34;https://www.ng.bluemix.net/docs/#starters/install_cli.html&#34;&gt;install CLI&lt;/a&gt; for instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a sample Meteor app, we are going to use the leaderboard example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor create --example leaderboard
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the sample app to Bluemix. &lt;strong&gt;Note&lt;/strong&gt;, this command will not start the app, we will need to choose our database next. Also replace leaderboard with a unique name for your app, for example leaderboard-jbs (my intials).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push leaderboard -b https://github.com/cloudfoundry-community/cf-meteor-buildpack.git --no-start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to choose if we want to use the built on Mongo DB with Cloud Foundry or an external third party MongoLab. It honestly doesn&amp;rsquo;t matter too much but MongoLab is built for scale is more reliable, I would choose MongoLab myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Built in MongoDB:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create the database.
    cf create-service mongodb 100 leaderboard-mongodb&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect the database to our app. Replace leaderboard with the name of your app (ex. leaderboard-jbs).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf bind-service leaderboard leaderboard-mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would then become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf bind-service leaderboard-jbs leaderboard-mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;MongoLab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create the database.
    cf create-service mongolab sandbox leaderboard-mongolab&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect the database to our app. Replace leaderboard with the name of your app (ex. leaderboard-jbs).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf bind-service leaderboard leaderboard-mongolab
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;would then become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cf bind-service leaderboard-jbs leaderboard-mongolab
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the application. Replace leaderboard with the name of your app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf start leaderboard
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open up two web browsers and goto the same url, for me my URL would be &lt;a href=&#34;http://leaderboard-jbs.mybluemix.net&#34;&gt;http://leaderboard-jbs.mybluemix.net&lt;/a&gt;.  I got this url by putting the name of my app in front of mybluemix.net.&lt;/p&gt;

&lt;p&gt;In the video below you can see when you choose a player and then click add 5 points the other browser is updated instantly.  The example app is saving this information in the Mongo database then using websockets to notify all the connected clients of the change.  This is one of the really powerful features of Meteor.&lt;/p&gt;

&lt;p&gt;The work with the developer at the client last week has renewed my interest in Meteor and will have to dig into it more.&lt;/p&gt;

&lt;p&gt;If you prefer to watch a video of this as well, check out Video – &lt;a href=&#34;http://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/&#34;&gt;Deploying your Meteor app to Cloud Foundry and Bluemix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter &lt;a href=&#34;https://twitter.com/jsloyer target=&#34;&gt;@jsloyer&lt;/a&gt;.  There will also be a video forth coming as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microservices in Bluemix</title>
      <link>http://www.jeffsloyer.io/post/microservices-in-bluemix/</link>
      <pubDate>Mon, 19 Jan 2015 09:34:18 -0500</pubDate>
      
      <guid>http://www.jeffsloyer.io/post/microservices-in-bluemix/</guid>
      <description>

&lt;p&gt;Monolith apps are no more.  The age of the monolith is over.  It wasn’t that long ago that companies and developers (myself included) were deploying one giant app that did everything.  The app would serve all your static files, front-end HTML and CSS and Javascript, act as your REST API, serve as your data persistance tier, handles sessions, handle logins, and do security for your app.  The list could keep going on and on.  As the age of the code base progresses it gets more and more complicated and tangled and if a new feature needs to be developed or an old piece of code needs to be modified it takes a cross functional team of many different people to make it happen.&lt;/p&gt;

&lt;p&gt;First we are going to talk about how a monolith app works, some of the positives and negatives and then we will talk about how things work in an app utilizing microserivces and the positivities and negatives associated with it.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-monolith&#34;&gt;What is a Monolith?&lt;/h2&gt;

&lt;p&gt;In a traditional monolith app you would have your basic three tier app consisting of a persistence layer, middleware tier/business logic, and front end code.  The advantage of this is there is just one application to manage and scale.  However the downside is that any change to any of the three tiers it requires cranking up the giant distributed team and pushing a new release.  For example, if Dave a front-end dev wanted and he wanted to change the color of a button, it would require the whole app to built, tested, and re-deployed for a tiny change.&lt;/p&gt;

&lt;p&gt;This is quite wasteful over everyone’s time, dev’s from the persistence layer, business logic team, and front end team need to be involved.  This involves cutting a new release, running it through whatever QA/test phases there is and pushing it to production and hoping that nothing else got introduced or anyone else regressed some features.&lt;/p&gt;

&lt;p&gt;Additionally, by having a monolith app the code base can become quite large and incredibly complex to maintain.  This is compounded exponentially as the age of an app grows.  Eventually, there is so much tangled and twisted code its hard to understand how things link together and work.  This is one of the hidden costs of a monolith app.&lt;/p&gt;

&lt;h2 id=&#34;microservice-advantages&#34;&gt;Microservice Advantages&lt;/h2&gt;

&lt;p&gt;A microservice can be defined simply as &amp;ldquo;fine grained SOA&amp;rdquo; – Adrian Cockcroft, Netflix.  In a longer description it can be thought of a set of small services with known functionality communicating over a common lightweight API, either HTTP REST API’s or more recently a lightweight messaging protocol (more on this later).&lt;/p&gt;

&lt;blockquote&gt;&#34;Fine grained SOA&#34; Adrian Cockcroft, Netflix&lt;/blockquote&gt;

&lt;p&gt;Microservices provide a huge advantage for the case we talked about earlier where Dave our front-end dev wants to change the color of a button, no longer does the giant dev machine need to be involved.  Instead the UI layer is a separate service and changes can be made independent from other parts of the application.  The UI team can crank out as many releases as their heart desires.&lt;/p&gt;

&lt;h2 id=&#34;2-pizza-teams&#34;&gt;2 Pizza Teams&lt;/h2&gt;

&lt;p&gt;We aren’t talking about skimping on our employees and not feeding them enough at work, but we are instead talking about the size of the team.  Amazon first coined this term back in 2011.  It has been written about extensively and in such publications as the &lt;a href=&#34;http://www.wsj.com/articles/SB10001424052970203914304576627102996831200&#34;&gt;Wall Street Journal&lt;/a&gt;.  Basically what it boils down to is having each team small enough that you can feed them with 2 pizza’s.  So you might be asking what the importance of this is, let’s use our example of our front-end dev Dave again.  By Dave having a small team they can organize themselves efficiently and deliver functionality on their own instead of being tied to a giant release of the application.  A team doesn’t have to multiple people, it can actually be a team of just 1 but be sure to never violate the 2 pizza team rule though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/01/two-pizza-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/01/two-pizza-medium.jpg&#34; alt=&#34;two pizza 300x200 Microservices in Bluemix&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;i-wanna-go-fast-it-s-all-about-speed&#34;&gt;I Wanna Go Fast (It’s All About Speed)&lt;/h2&gt;

&lt;p&gt;As popularized by Talladega Nights, speed is king.  Who doesn’t want to go fast?  If you answered no to that you are probably going to get beaten by your competition and be left in the dust.  As the &lt;a href=&#34;http://www.thomaslfriedman.com/bookshelf/the-world-is-flat&#34;&gt;world is being flattened&lt;/a&gt; there is constantly new competition every day and dev team’s have to constantly be delivering to keep their product and company relevant.&lt;/p&gt;

&lt;p&gt;So back to our example of  Dave our front-end dev again. Since Dave’s team has their own UI service they can constantly deliver changes and new features without having to wait for other team’s to deliver functionality.  Dave’s team can even deliver new UI code that is gated on some business logic code by using &lt;a href=&#34;https://codeascraft.com/2011/02/04/how-does-etsy-manage-development-and-operations/&#34;&gt;feature flags&lt;/a&gt; and &lt;a href=&#34;http://apptimize.com/blog/2014/01/etsy-continuous-innovation-ab-testing/&#34;&gt;A/B testing&lt;/a&gt; to selectively enable code and test new code out.  This allows Dave’s team to try out new ideas and if they don’t work they fail fast and pivot and change course.  By doing this Dave’s product and company stay relevant.&lt;/p&gt;

&lt;p&gt;Again as Ricky Bobby from Talladega Nights would say, &amp;ldquo;if you aint first you’re last.&amp;rdquo;  When I saw the movie my mind obviously just went to car racing and sports but it can be extended to the IT industry as well.  If you aren’t first you probably aren’t relevant and someone else is beating you to market.  Eventually you could go out of business.&lt;/p&gt;

&lt;h2 id=&#34;devops-devops-devops&#34;&gt;DevOps DevOps DevOps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/01/devops-borat-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/01/devops-borat-medium.jpg&#34; alt=&#34;devops borat Microservices in Bluemix&#34; /&gt;&lt;/a&gt;&amp;ldquo;To make error is human. To propagate error to all server in automatic way is &lt;a href=&#34;https://twitter.com/hashtag/devops?src=hash&#34;&gt;#&lt;strong&gt;devops&lt;/strong&gt;&lt;/a&gt;.&amp;rdquo; – &lt;a href=&#34;https://twitter.com/devops_borat&#34;&gt;DevOps Borat&lt;/a&gt;.  This &lt;a href=&#34;https://twitter.com/devops_borat/status/41587168870797312&#34;&gt;quote&lt;/a&gt; sums up why DevOps is important.  With each service being completely different architecture wise and language it is in it would be near impossible for a central &amp;ldquo;ops&amp;rdquo; team to manage all the apps.  Instead in microservices world each team is responsible for their own app.  You might be thinking that having dev’s manage a production service is bad and they won’t be responsive.  You are wrong, multiple companies have been doing this for years and it actually creates a sense of empowerment in the dev team.  Dev’s don’t want a call at 3am in the morning notifying them that their service is down.  In turn dev’s start taking more pride in their work and start thinking about decisions they make that will affect the availability of their service.  It creates a new mindset for people.&lt;/p&gt;

&lt;h2 id=&#34;let-the-dev-s-rule&#34;&gt;Let the Dev’s rule&lt;/h2&gt;

&lt;p&gt;Continuing on from above empowering dev’s is super important.  As a developer feels empowered they will make better decisions for their service they work on and thus end up making better decisions for the company.  When someone feels empowered they are putting their stamp of approval behind a product or feature and basically signing it with their name, code to them is a craft.&lt;/p&gt;

&lt;p&gt;By embracing microservices and the de-centralized architecture it allows dev’s to innovate and come up with cool ideas and test them out.  If they don’t work that is ok, keep innovating and moving forward.  I am a photographer and in college someone once told me for every 10 pictures you take you will only get one good one.  The same can be said here as well, try, test, measure  (repeat). Obviously there is some science and planning put into this but the point is creating an environment to foster innovation.&lt;/p&gt;

&lt;h2 id=&#34;design-for-failure&#34;&gt;Design for Failure&lt;/h2&gt;

&lt;p&gt;When using microservices each service should be able to stand on its own and run by itself.  If it has outside dependencies it isn’t really a microservice.  Netflix is a prime example of this.  For example, if a service goes down that generates recommendations the whole site doesn’t break.  Other services keep functioning without the broken service.  In some cases, other services will know how to operate without the broken service.  Feature degradation or local caching can be used to prevent a break in the user experience.&lt;/p&gt;

&lt;p&gt;This is designing for failure.  In the monolith world (which remember no longer exists) we would design and develop for the happy path and really never for the sad path.  By having a service based architecture we need to design and develop for the failure cases.  Some guy digging in his front yard could cut a piece of fiber and bring our monolith app to the ground.  By designing for a service not being there and allowing the product to continue to function is at utmost important.  In the monolith app dev’s sometimes would not think this way because everything is self contained by in a decentralized architecture you are forced to think about the failure case and how to handle it in a graceful way that doesn’t affect the user’s experience too much.&lt;/p&gt;

&lt;h2 id=&#34;immutable-code&#34;&gt;Immutable Code&lt;/h2&gt;

&lt;p&gt;Part of this thought of designing for failure is having immutable code.  When introducing new code you MUST not affect the functionality of previous code.  In a product that has a UI this is a little harder to do but can be done with feature flags and A/B testing but with an API based service changing the inputs and outputs of a service is a big no-no.  If you absolutely must do this at least have a deprecation period of N+2 or 3 to give customers and consumers of your service some advanced warning that changes are coming.  Ideally you wouldn’t deprecate an API, just revision your API, for example if you are using HTTP REST API’s just use &lt;code&gt;/api/v1.0/&lt;/code&gt; and for your next version &lt;code&gt;/api/v1.1/&lt;/code&gt; as a prefix.&lt;/p&gt;

&lt;h2 id=&#34;real-world-microservices-architecture&#34;&gt;Real world Microservices architecture&lt;/h2&gt;

&lt;p&gt;In the real world we would probably have a database, some business logic service (probably multiple of these), a UI service, our basic three tier app but this time disjoint from each other.  See below.
The &amp;ldquo;glue&amp;rdquo; between the services is supposed to be something light-weight, you can use HTTP REST API’s but more recently there has been a move to a messaging based &amp;ldquo;glue&amp;rdquo;.  In particular like MQTT or AMQP.  This is great as it allows a service to be a &amp;ldquo;worker&amp;rdquo; or a client of another service, or in queuing terms, producers and consumers.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-bluemix-to-create-microservices&#34;&gt;How to use Bluemix to create Microservices&lt;/h2&gt;

&lt;p&gt;To demonstrate this real world example let’s talk about how this would work in Bluemix.  In Bluemix we can create a bunch of services, in case they will be in Node.js and the &amp;ldquo;glue&amp;rdquo; between our services will be MQLight.  An important point we should talk about here is the notion of producer/consumer (pub/sub) vs round-robin queuing.&lt;/p&gt;

&lt;p&gt;For our example let’s say we have a service that is scaled out to 5 nodes (we must be really popular).  Each of these nodes is a worker for some business process, in this case let’s say sending a registration email.  When someone sign’s up for our site we want to send them a registration email, we don’t want each of the 5 nodes of our service emailing the person.  I would probably walk away from something if I got 5 duplicate registration emails.  In this case we want round-robin queuing.&lt;/p&gt;

&lt;p&gt;However on the converse side there is cases where we want producer/consumer (pub/sub queuing).  This effectively means all 5 nodes of a service will receive the same message and respond.  Let’s say we have a UI service that is the front-end for a real time chat service.  If our application is scaled out to 5 nodes how can we properly propagate chat messages to all the connected clients.  The answer is allowing each front-end service to receive the same message to relay to all the clients.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/01/mqlight-medium.jpg&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/01/mqlight-medium.jpg&#34; alt=&#34;mqlight Microservices in Bluemix&#34; /&gt;&lt;/a&gt;When architecting your microservices you need to keep queuing in mind and how clients and services communicate with each other.  Make sure you choose a queuing technology that supports your desired behavior of pub/sub or round-robin.&lt;/p&gt;

&lt;p&gt;So where does this leave us in Bluemix?  MQLight, with MQLight you can easily do pub/sub and round-robin with the same service provider.  This is great because as the developer I don’t have to use two different messaging providers.&lt;/p&gt;

&lt;h2 id=&#34;example-app-in-bluemix&#34;&gt;Example App in Bluemix&lt;/h2&gt;

&lt;p&gt;So let’s build something to demonstrate all of this.  The example app we will be building contains a front-end service that allows users to enter text and another service that will convert it to upper case.  While this is not a real world example it demonstrates microservices using backend workers.&lt;/p&gt;

&lt;p&gt;A real world example might be  an image processing app that applies a sexy filter to an image it and then uploads it to Instagram.  If we did this we could break this up into three services.  A web service that accepts an image over http(s), our sexy filter engine (maybe imagemagick), then a service that uploads the image to our social media network of choice.&lt;/p&gt;

&lt;p&gt;So back to our example app of converting text to uppercase.  The UI is below, our UI doesn’t lock when we submit data and we can keep using it.  As results are finished processing in our &amp;ldquo;text uppercase&amp;rdquo; service, results are delivered real time to our front-end service.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jeffsloyer.io/images/2015/01/sample_screenshot-medium.png&#34;&gt;&lt;img src=&#34;http://www.jeffsloyer.io/images/2015/01/sample_screenshot-medium.png&#34; alt=&#34;sample screenshot Microservices in Bluemix&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make this seem more world the example code introduces some timeouts/waits to make it seem like some backend processing is going on in a microservice.  To get this running follow the following steps.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git clone https://hub.jazz.net/git/ibmmq/mqlight-worker-offload-sample-node
    cf create-service MQLight standard MQLight-sampleservice
    cf push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What the above does is checkout some example code that contains a front-end service and a back-end service that does our &amp;ldquo;text uppercasing&amp;rdquo; and creates a QLight to provide the messaging between our two services.&lt;/p&gt;

&lt;p&gt;Once the cf push command is done running (it might take a bit) we should see something like the following saying our apps are up.&lt;/p&gt;

&lt;p&gt;Text processing service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Showing health and status for app MQL.sample.node.backend in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...
OK
requested state: started
instances: 2/2
usage: 256M x 2 instances
urls:
last uploaded: Mon Jan 19 18:52:05 +0000 2015
     state     since                    cpu    memory          disk
#0   running   2015-01-19 01:53:08 PM   0.0%   11.8M of 256M   75.8M of 1G
#1   running   2015-01-19 01:53:05 PM   0.0%   11.5M of 256M   75.8M of 1G
Front-end service:
Showing health and status for app MQL.sample.node.frontend in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...
OK
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: mqlightsample-node-undeputed-trierarch.mybluemix.net
last uploaded: Mon Jan 19 18:53:16 +0000 2015
     state     since                    cpu    memory          disk
#0   running   2015-01-19 01:54:20 PM   0.0%   24.3M of 512M   78.7M of 1G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let’s checkout the app, I have recorded a short video of it working.  If you notice the text service is simulating things like a real world service might respond with results coming back as they finish being processed.&lt;/p&gt;

&lt;h2 id=&#34;stay-tuned&#34;&gt;Stay Tuned!!!&lt;/h2&gt;

&lt;p&gt;There will be some real world examples coming on how to use microservices in Bluemix since now we have a foundation on what microserivces are.  Please stay tuned and follow me on Twitter at &lt;a href=&#34;http://twitter.com/jsloyer&#34;&gt;@jsloyer&lt;/a&gt; for some real world apps!&lt;/p&gt;

&lt;h2 id=&#34;webcast-playback&#34;&gt;Webcast playback&lt;/h2&gt;

&lt;p&gt;The replay of the webcast is available at &lt;a href=&#34;http://ibm.biz/BlmxMicroservices-Blog&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>